/*******************************************************************************
 * AIController_TA generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib Â© 2009-2015 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class AIController_TA extends AIController
    native;


struct native CachedTargetData
{
    var BTTarget Target;
    var int Index;
    var BTProxyData Data;
    var float CacheTime;
};

struct native CachedProxyData
{
    var BTProxyType Type;
    var int Index;
    var BTProxyData Data;
    var float CacheTime;

};

struct native SkillRange
{
    var() float Easy;
    var() float Hard;
    var transient float Value;
};

var privatewrite transient Car_TA Car;
var privatewrite transient Vehicle_TA Vehicle;
/** Component in charge of our behavior */
var() privatewrite export editinline BTComponent BT;
/** Targets used by the behavior tree */
var() BTProxyType SelfProxyType;
/** Targets used by the behavior tree */
var() BTProxyType NoneProxyType;
/** Targets used by the behavior tree */
var() BTProxyType DebugProxyType;
var() BTProxyType TeamCarsProxyType;
var() BTProxyType EnemyCarsProxyType;
var() BTProxyType OtherCarsProxyType;
var() BTProxyType BoostPillsProxyType;
var() BTProxyType SelectedProxyType;
var() BTTarget SelfTarget;
var() BTTarget NoneTarget;
var() BTTarget IteratorTarget;
var() BTTarget TeamCarsTarget;
var() BTTarget SelectedTarget;
var transient BTTarget ContextTarget;
var() BTNode DebugBTNode;
/** Locks local to this AI */
var() privatewrite export editinline BTLockCollection Locks;
/** Steer accuracy given the bot's skill level */
var() SkillRange SkillSteerError;
/** Steer speed given the bot's skill level */
var() SkillRange SkillSteerSpeed;
/** Throttle speed given the bot's skill level */
var() SkillRange SkillThrottleSpeed;
var privatewrite transient GameEvent_TA GameEvent;
var privatewrite transient AIManager_TA AIManager;
var protected transient array<NamedEvent> QueuedEvents;
//var transient VehicleInputs Input;
var privatewrite transient Vector ForwardDir;
var privatewrite transient Rotator ForwardRotation;
var transient Vector GroundNormal;
var protectedwrite transient array<CachedProxyData> CachedProxyDatas;
var protectedwrite transient array<CachedTargetData> CachedTargetDatas;
var protectedwrite native transient Map_Mirror TargetFilterMap;
var protectedwrite transient array<BTNode> CachedTargetFilters;
var transient Vector DebugDriveDestination;
//var private native transient CachedObstaclesData CachedObstacles;
//var privatewrite transient AITraits Traits;
var privatewrite transient array<Car_TA> TeamCars;
var privatewrite transient array<Car_TA> EnemyCars;
var privatewrite transient array<Car_TA> OtherCars;
var const transient bool bForceUpdateConditions;
var transient bool bCanUseBoost;
var AIRole_TA TestRole;
var transient GameShare_TA GameShare;
var const transient Actor SelectedActor;
/**
var delegate<EventNamedEvent> __EventNamedEvent__Delegate;
var delegate<EventSkillChanged> __EventSkillChanged__Delegate;
var delegate<EventTraitsChanged> __EventTraitsChanged__Delegate;

delegate EventNamedEvent(AIController_TA AI, name EventName, Actor Sender)
{
    //return;    
}

delegate EventSkillChanged(AIController_TA AI)
{
    //return;    
}

delegate EventTraitsChanged(AIController_TA AI)
{
    //return;    
}
**/
event PreBeginPlay()
{
}

function Init(GameEvent_TA InGameEvent)
{
    //return;    
}

private final function HandleCarSpawned(GameEvent_TA InGameEvent, Car_TA InCar)
{

}

private final function HandleOtherCarTeamChanged(Car_TA InCar)
{
    //return;    
}
/**
private final function HandleOtherCarDemolished(Car_TA Victim, DemolishData Data)
{
    //return;    
}
**/
private final function HandleOtherCarDestroyed(Pawn_X InCar)
{
    //return;    
}
/**
function SetTraits(AITraits InTraits)
{
    //return;    
}
**/
function ReInitBT()
{
    //return;    
}

function SetSkill(float NewSkill)
{
    //return;    
}

function Possess(Pawn inPawn, bool bVehicleTransition)
{ 
}

function UnPossess()
{

}

protected function SetCar()
{
   
}

protected function OnCarSetup(Car_TA InCar)
{
 
}

event Destroyed()
{

}

protected event OnNamedEvent(name EventName, optional Actor Sender)
{

}

final function AbortBT()
{
   
}

final function DoNothing()
{
    
}

final function DebugDriveTo(Vector Destination)
{
  
}

function CleanupPRI()
{

}

// Export UAIController_TA::execAdvanceLocation(FFrame&, void* const)
native final function Vector AdvanceLocation(const out Vector Loc, const out Vector Vel, const out Vector Accel, float Time)
{
    //native.Loc;
    //native.Vel;
    //native.Accel;
    //native.Time;        
}

// Export UAIController_TA::execPredictLanding(FFrame&, void* const)
native final function PredictLanding(out BTProxyData Data, optional out float Time, optional float GroundZ)
{
    //native.Data;
    //native.Time;
    //native.GroundZ;        
}

// Export UAIController_TA::execPredictPhysics(FFrame&, void* const)
native final function PredictPhysics(out BTProxyData PhysicsData, float Time, optional float GroundZ)
{
    //native.PhysicsData;
    //native.Time;
    //native.GroundZ;        
}

// Export UAIController_TA::execAdvancePhysics(FFrame&, void* const)
native final function AdvancePhysics(out BTProxyData PhysicsData, float Time)
{
    //native.PhysicsData;
    //native.Time;        
}

// Export UAIController_TA::execWillImpact2D(FFrame&, void* const)
native final function bool WillImpact2D(const out BTProxyData A, const out BTProxyData B, optional out float CollideTime)
{
    //native.A;
    //native.B;
    //native.CollideTime;        
}

// Export UAIController_TA::execGetClosestTime2D(FFrame&, void* const)
native final function float GetClosestTime2D(const out BTProxyData A, const out BTProxyData B, float MaxTime)
{
    //native.A;
    //native.B;
    //native.MaxTime;        
}

// Export UAIController_TA::execFlattenPhysics(FFrame&, void* const)
native final function BTProxyData FlattenPhysics(const out BTProxyData ProxyData)
{
    //native.ProxyData;        
}

final function Vector FlattenDestination(Vector Destination)
{
    //return ReturnValue;    
}

final function Vector FlattenOffset(Vector Offset, optional out float Height)
{

    //return ReturnValue;    
}
/**
final function float GetDriveDistance(BTProxyData Proxy)
{
    //return ReturnValue;    
}
**/
// Export UAIController_TA::execGetDriveTime(FFrame&, void* const)
native final function float GetDriveTime(float Distance)
{
    //native.Distance;        
}

// Export UAIController_TA::execCreateProxyData(FFrame&, void* const)
native final event BTProxyData CreateProxyData(Actor A, optional float Radius)
{
    //native.A;
    //native.Radius;        
}

// Export UAIController_TA::execCreateVehicleProxyData(FFrame&, void* const)
native final event BTProxyData CreateVehicleProxyData(Vehicle_TA InVehicle)
{
    //native.InVehicle;        
}

// Export UAIController_TA::execGetTargetData(FFrame&, void* const)
native final function bool GetTargetData(BTTarget Target, out BTProxyData OutData)
{
    //native.Target;
    //native.OutData;        
}

// Export UAIController_TA::execGetIndexedTargetData(FFrame&, void* const)
native final function bool GetIndexedTargetData(BTTarget Target, int Index, out BTProxyData OutData)
{
    //native.Target;
    //native.Index;
    //native.OutData;        
}
/**
// Export UAIController_TA::execGetProxyData(FFrame&, void* const)
native final function bool GetProxyData(BTProxyType Type, out BTProxyData OutData)
{
    //native.Type;
    //native.OutData;        
}

// Export UAIController_TA::execGetIndexedProxyData(FFrame&, void* const)
native final function bool GetIndexedProxyData(BTProxyType Type, int Index, out BTProxyData OutData)
{
    //native.Type;
    //native.Index;
    //native.OutData;        
}

protected event bool GetProxyDataInternal(BTProxyType Type, int Index, out BTProxyData OutData)
{
   
}
**/
// Export UAIController_TA::execGetObstacle(FFrame&, void* const)
native final function bool GetObstacle(Vector Destination, optional out Vector HitLocation)
{
    //native.Destination;
    //native.HitLocation;        
}

// Export UAIController_TA::execGetObstacleInRadius(FFrame&, void* const)
native final function bool GetObstacleInRadius(Vector Destination, float Radius, optional out Vector HitLocation)
{
    //native.Destination;
    //native.Radius;
    //native.HitLocation;        
}

// Export UAIController_TA::execAllTargets(FFrame&, void* const)
native final iterator function AllTargets(BTTarget Target, out BTProxyData OutData)
{
    //native.Target;
    //native.OutData;        
}

// Export UAIController_TA::execSetSelectedActor(FFrame&, void* const)
native function SetSelectedActor(Actor NewActor)
{
    //native.NewActor;        
}
/**
simulated function PrintDebugInfo(DebugDrawer Drawer)
{

}
**/
state DoingNothing
{

}