/*******************************************************************************
 * Loadout_TA generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib Â© 2009-2015 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class Loadout_TA extends Object;
var privatewrite array<int> Products;
var privatewrite LoadoutTeamPaint TeamPaints[2];
var privatewrite int GaragePreviewTeam;
var privatewrite Profile_TA Profile;
/**
var delegate<EventChanged> __EventChanged__Delegate;
var delegate<EventPreviewTeamChanged> __EventPreviewTeamChanged__Delegate;
var delegate<EventProductEquipped> __EventProductEquipped__Delegate;

delegate EventChanged(Loadout_TA Loadout)
{
    //return;    
}

delegate EventPreviewTeamChanged(Loadout_TA Loadout)
{
    //return;    
}

delegate EventProductEquipped(int ProductID)
{
    //return;    
}
function Init(Profile_TA InProfile)
{
    Profile = InProfile;
    TeamPaints[0] = class'GameData_TA'.default.DefaultLoadout.TeamPaints[0];
    TeamPaints[1] = class'GameData_TA'.default.DefaultLoadout.TeamPaints[1];
    Validate();
    //return;    
}

final function Validate()
{
    LogInternal((((("  Pre Products=" $ GetProductsString(Products)) @ "\\n       Paints[0]=") $ GetTeamPaintsString(TeamPaints[0])) @ "\\n       Paints[1]=") $ GetTeamPaintsString(TeamPaints[1]), 'LoadoutValidation', true);
    StaticValidate(Products, Profile);
    StaticValidatePaint(TeamPaints, Profile);
    LogInternal((((("  Post Products=" $ GetProductsString(Products)) @ "\\n       Paints[0]=") $ GetTeamPaintsString(TeamPaints[0])) @ "\\n       Paints[1]=") $ GetTeamPaintsString(TeamPaints[1]), 'LoadoutValidation', true);
    //return;    
}

static function StaticValidate(out array<int> OutProducts, Profile_TA ForProfile)
{
    local ProductSlot_TA Slot;
    local int ProductID;

    LogInternal("Validate", 'LoadoutValidation', true);
    OutProducts.Length = class'GameData_TA'.default.ProductSlots.Length;
    // End:0x18B
    foreach class'GameData_TA'.default.ProductSlots(Slot,)
    {
        ProductID = OutProducts[Slot.SlotIndex];
        ValidateProductID(ProductID, ForProfile, string(Slot.Name));
        OutProducts[Slot.SlotIndex] = ProductID;
        // End:0x18A
        if((Slot.GetDefaultProductID() > 0) && ProductID == 0)
        {
            OutProducts[Slot.SlotIndex] = Slot.GetDefaultProductID();
        }        
    }    
    class'GameData_TA'.default.Products.RemoveIncompatibleProducts(OutProducts);
    //return;    
}

static function StaticValidatePaint(out LoadoutTeamPaint Paint[2], Profile_TA ForProfile)
{
    local int Index;

    Index = 0;
    J0x0B:
    // End:0x211 [Loop If]
    if(Index < 2)
    {
        ValidateProductID(Paint[Index].TeamFinishID, ForProfile, "TeamFinish" $ string(Index));
        ValidateProductID(Paint[Index].CustomFinishID, ForProfile, "CustomFinish" $ string(Index));
        // End:0x162
        if(Paint[Index].TeamFinishID == 0)
        {
            Paint[Index].TeamFinishID = class'GameData_TA'.default.DefaultLoadout.TeamPaints[Index].TeamFinishID;
        }
        // End:0x203
        if(Paint[Index].CustomFinishID == 0)
        {
            Paint[Index].CustomFinishID = class'GameData_TA'.default.DefaultLoadout.TeamPaints[Index].CustomFinishID;
        }
        ++ Index;
        // [Loop Continue]
        goto J0x0B;
    }
    //return;    
}

static function ValidateProductID(out int ProductID, Profile_TA ForProfile, coerce optional string SlotName)
{
    // End:0x95
    if(ProductID > 0)
    {
        // End:0x95
        if(!ForProfile.SaveData.IsProductUnlocked(ProductID))
        {
            LogInternal(("  Removing product" @ SlotName) @ string(ProductID), 'LoadoutValidation');
            ProductID = 0;
        }
    }
    //return;    
}

static function ValidateForcedProducts(out LoadoutData Data, Profile_TA ForProfile)
{
    local ProductAsset_Body_TA Body;
    local int BodyProductID, Index;

    LogInternal("  Pre " $ GetLoadoutDataString(Data), 'Loadout', true);
    BodyProductID = Data.Products[class'GameData_TA'.default.BodySlot.SlotIndex];
    Body = ProductAsset_Body_TA(class'GameData_TA'.default.Products.LoadProduct(BodyProductID));
    // End:0x31D
    if(Body.ForcedProducts.Length > 0)
    {
        Data.Products = Body.GetForcedLoadout().Products;
        Index = 0;
        J0x152:
        // End:0x31A [Loop If]
        if((Index < 2) && Index < 2)
        {
            // End:0x240
            if(Body.ForcedPaintFinishes[Index].TeamFinish != none)
            {
                Data.TeamPaints[Index].TeamFinishID = Body.ForcedPaintFinishes[Index].TeamFinish.GetID();
            }
            // End:0x30C
            if(Body.ForcedPaintFinishes[Index].CustomFinish != none)
            {
                Data.TeamPaints[Index].CustomFinishID = Body.ForcedPaintFinishes[Index].CustomFinish.GetID();
            }
            ++ Index;
            // [Loop Continue]
            goto J0x152;
        }
    }
    // End:0x37B
    else
    {
        StaticValidate(Data.Products, ForProfile);
        StaticValidatePaint(Data.TeamPaints, ForProfile);
    }
    LogInternal("  Post " $ GetLoadoutDataString(Data), 'Loadout', true);
    //return;    
}

final function LoadoutData GetData()
{
    local LoadoutData OutData;

    OutData.Products = Products;
    OutData.TeamPaints[0] = TeamPaints[0];
    OutData.TeamPaints[1] = TeamPaints[1];
    return OutData;
    //return ReturnValue;    
}

final function SetData(LoadoutData Data)
{
    Products = Data.Products;
    TeamPaints[0] = Data.TeamPaints[0];
    TeamPaints[1] = Data.TeamPaints[1];
    Validate();
    EventChanged(self);
    //return;    
}

final function SetGaragePreviewTeam(int PreviewTeam)
{
    // End:0x3E
    if(PreviewTeam != GaragePreviewTeam)
    {
        GaragePreviewTeam = PreviewTeam;
        EventPreviewTeamChanged(self);
    }
    //return;    
}

final function bool IsProductEquipped(ProductSlot_TA Slot, int ProductID)
{
    return Products[Slot.SlotIndex] == ProductID;
    //return ReturnValue;    
}

static final function string GetProductsString(const out array<int> InProducts)
{
    local int ProductID;
    local string S;

    // End:0x3D
    foreach InProducts(ProductID,)
    {
        S = (S $ string(ProductID)) $ " ";        
    }    
    return S;
    //return ReturnValue;    
}

static final function string GetTeamPaintsString(const out LoadoutTeamPaint Paint)
{
    return ((string(Paint.TeamColorID) @ string(Paint.TeamFinishID)) @ string(Paint.CustomColorID)) @ string(Paint.CustomFinishID);
    //return ReturnValue;    
}

static final function string GetLoadoutDataString(const out LoadoutData Data)
{
    return (((("Products=" $ GetProductsString(Data.Products)) @ "Paints[0]=") $ GetTeamPaintsString(Data.TeamPaints[0])) @ "Paints[1]=") $ GetTeamPaintsString(Data.TeamPaints[1]);
    //return ReturnValue;    
}

simulated function PrintDebugInfo(DebugDrawer Drawer)
{
    Drawer.PrintProperty(string('Products'), GetProductsString(Products));
    Drawer.PrintArrayProperty(string('TeamPaints'), 0, GetTeamPaintsString(TeamPaints[0]));
    Drawer.PrintArrayProperty(string('TeamPaints'), 1, GetTeamPaintsString(TeamPaints[1]));
    //return;    
}
**/
