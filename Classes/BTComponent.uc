/*******************************************************************************
 * BTComponent generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib Â© 2009-2015 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class BTComponent extends Component
    native;

struct native BTStatusLog
{
    var BTNode Node;
    var int Depth;
    //var _AITypes_TA.EBTStatus Status;
    var string Message;
    var bool bSetMessage;
    var bool bCondition;
    var float LastEvalTime;

    structdefaultproperties
    {
        // Object Offset:0x025D51F4
        Node=none
        Depth=0
        //Status=EBTStatus.BTStatus_Fail
        Message=""
        bSetMessage=false
        bCondition=false
        LastEvalTime=0.0
    }
};

/** Topmost node of the tree */
var() private const BTNode Root;
//var const transient _AITypes_TA.EBTStatus RootStatus;
var privatewrite transient AIController_TA AI;
/** Print our status logs to the console when something changes */
var() bool bPrintStatusLogs;
var transient bool bDirtyStatusLogs;
var const transient bool bEvaluatingConditions;
var transient bool bPauseNextTick;
var const transient array<BTStatusLog> StatusLogs;
var const transient int StatusLogsIndex;
var const transient array<int> StatusLogsStack;
//var private transient DebugDrawer_X CanvasDrawer;
//var privatewrite transient array<BTDynamicLinkData> DynamicLinks;
/**
var delegate<EventDynamicLinksChanged> __EventDynamicLinksChanged__Delegate;

delegate EventDynamicLinksChanged(BTComponent BT)
{
    //return;    
}
**/
// Export UBTComponent::execInit(FFrame&, void* const)
native function Init(AIController_TA ForAI)
{
    //native.ForAI;        
}

// Export UBTComponent::execTick(FFrame&, void* const)
native function Tick(float DeltaTime)
{
    //native.DeltaTime;        
}

// Export UBTComponent::execAbort(FFrame&, void* const)
native function Abort();

// Export UBTComponent::execSetRoot(FFrame&, void* const)
native function SetRoot(BTNode NewRootArchetype)
{
    //native.NewRootArchetype;        
}

final function SetDynamicLink(name LinkName, BTNode Node)
{  
}

protected final function string GetDepthSpaces(float Depth)
{
  
}

protected final function Color GetStatusColor(_AITypes_TA.EBTStatus Status)
{
 
}
/**
simulated function PrintDebugInfo(DebugDrawer Drawer)
{
      //return;    
}
**/