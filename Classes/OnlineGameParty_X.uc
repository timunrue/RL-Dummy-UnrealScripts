/*******************************************************************************
 * OnlineGameParty_X generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib Â© 2009-2015 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class OnlineGameParty_X extends Online_X;

enum PartyProcessingStatus
{
    PPS_None,
    PPS_Create,
    PPS_Join,
    PPS_MAX
};

////var privatewrite transient @NULL PartyID;
//var privatewrite transient GetAPlayerController PartyLeader;
var private transient int MaxPartySize;
//var const export editinline GetUtcTimeInSeconds MessageComponent;
//var private transient @NULL PendingSearchStatus;
//var private GetUtcTimeInSeconds NullSearchStatus;
/** The amount of time in seconds that it takes for a party of size 1 to timeout and get destroyed */
var() private const int PartyTimeout;
var private transient int CurrentPartySize;
var private transient bool LastbSearchingStatus;
var private transient bool LastLockStatus;
var private transient bool bCheckedCommandLine;
var private transient bool LastbPrivateMatch;
var private transient name LastSearchState;
var private transient string LastServerBeaconAddress;
var private transient string LastServerGameAddress;
var private transient int LastPlaylist;
var private transient string LastPassword;
//var private transient @NULL LastJoinGameMessage;
var privatewrite transient byte ProcessingStatus;
/** How long to cache skills for our party */
var() float SkillCacheTime;
var private transient float LastSkillSyncTime;
var transient int PendingPartyLocalPlayerNum;
//var transient IsInTransientPackage PendingPartyId;
/**
var delegate<@NULL> __EventPartyCreated__Delegate;
var delegate<@NULL> __EventPlayerInvited__Delegate;
var delegate<@NULL> __EventPartyChanged__Delegate;
var delegate<@NULL> __EventPartySizeChanged__Delegate;
var delegate<@NULL> __EventSearchStatusChanged__Delegate;
var delegate<@NULL> __EventPartyError__Delegate;
var delegate<@NULL> __EventPartyJoinGameError__Delegate;
var delegate<@NULL> __EventPartyJoinGameSuccess__Delegate;
var delegate<@NULL> __EventPartyDestroyed__Delegate;
var delegate<@NULL> __EventConfirmJoinGameMessage__Delegate;
var delegate<@NULL> __EventLeaderLeftOnlineGame__Delegate;
var delegate<@NULL> __EventProcessingStatusChanged__Delegate;
var delegate<@NULL> __EventDisableCrossPlayChanged__Delegate;
var delegate<@NULL> __EventInviteToTrade__Delegate;
var delegate<@NULL> __EventAcceptedInviteToTrade__Delegate;
var delegate<@NULL> __EventCloseInviteToTrade__Delegate;
var delegate<@NULL> __EventReadyToTrade__Delegate;
var delegate<@NULL> __EventNotReadyToTrade__Delegate;
var delegate<@NULL> __EventSendTradeToBackEnd__Delegate;

delegate EventPartyCreated(GetAPlayerController PartyObject, bool bWasSuccessful)
{
    //return;    
}

delegate EventPlayerInvited(GetAPlayerController PartyObject, const out @NULL InPartyId, const out GetDefaultObject FriendId)
{
    //return;    
}

delegate EventPartyChanged(GetAPlayerController PartyObject)
{
    //return;    
}

delegate EventPartySizeChanged(GetAPlayerController PartyObject, int NewSize, int OldSize)
{
    //return;    
}

delegate EventSearchStatusChanged(GetAPlayerController PartyObject, string StatusMessage)
{
    //return;    
}

delegate EventPartyError(GetAPlayerController PartyObject, DumpUnreferencedAnims Error)
{
    //return;    
}

delegate EventPartyJoinGameError(GetAPlayerController PartyObject, string LocalizedErrorString)
{
    //return;    
}

delegate EventPartyJoinGameSuccess(GetAPlayerController PartyObject)
{
    //return;    
}

delegate EventPartyDestroyed(GetAPlayerController PartyObject)
{
    //return;    
}

delegate EventConfirmJoinGameMessage(GetAPlayerController PartyObject)
{
    //return;    
}

delegate EventLeaderLeftOnlineGame(GetAPlayerController PartyObject)
{
    //return;    
}

delegate EventProcessingStatusChanged(GetAPlayerController PartyObject)
{
    //return;    
}

delegate EventDisableCrossPlayChanged(GetAPlayerController PartyObject)
{
    //return;    
}

delegate EventInviteToTrade(GetAPlayerController PartyObject)
{
    //return;    
}

delegate EventAcceptedInviteToTrade(GetAPlayerController PartyObject)
{
    //return;    
}

delegate EventCloseInviteToTrade(GetAPlayerController PartyObject)
{
    //return;    
}

delegate EventReadyToTrade(GetAPlayerController PartyObject)
{
    //return;    
}

delegate EventNotReadyToTrade(GetAPlayerController PartyObject)
{
    //return;    
}

delegate EventSendTradeToBackEnd(GetAPlayerController PartyObject)
{
    //return;    
}

protected function OnInit()
{
    super.OnInit();
    // End:0x568
    if(NotEqual_InterfaceInterface(OnlineSub.LobbyInterface, (none)))
    {
        OnlineSub.LobbyInterface.AddLobbyErrorDelegate(HandlePartyError);
        OnlineSub.LobbyInterface.AddLobbyInviteDelegate(HandlePlayerInvited);
        OnlineSub.LobbyInterface.AddLobbyMemberStatusUpdateDelegate(HandleLobbyMemberStatusUpdate);
        OnlineSub.LobbyInterface.AddJoinLobbyCompleteDelegate(HandleJoinLobby);
        OnlineSub.LobbyInterface.AddLobbyReceiveBinaryDataDelegate(HandleLobbyReceiveBinaryData);
        OnlineSub.LobbyInterface.AddLobbyDestroyedDelegate(HandleLobbyDestroyed);
        OnlineSub.LobbyInterface.AddLobbySessionCreatedDelegate(HandleSessionCreated);
        MessageComponent.AddMessageHandler(class'PartyMessage_Kick_X', HandleKickMessage);
        MessageComponent.AddMessageHandler(class'PartyMessage_NewLeader_X', HandleNewLeader);
        MessageComponent.AddMessageHandler(class'PartyMessage_SearchStatus_X', HandleSearchStatus);
        MessageComponent.AddMessageHandler(class'PartyMessage_LocalPlayers_X', HandleLocalPlayers);
        MessageComponent.AddMessageHandler(class'PartyMessage_MatchmakingAvailability_X', HandleMatchmakingAvailability);
        MessageComponent.AddMessageHandler(class'PartyMessage_JoinGame_X', HandlePartyJoinGame);
        MessageComponent.AddMessageHandler(class'PartyMessage_BugIt_X', HandlePartyBugReport);
        MessageComponent.AddMessageHandler(class'PartyMessage_DisableCrossPlay_X', HandleDisableCrossPlayMessage);
        MessageComponent.AddMessageHandler(class'PartyMessage_InviteToTrade_X', HandleInviteToTradeMessage);
        MessageComponent.AddMessageHandler(class'PartyMessage_AcceptInviteToTrade_X', HandleAcceptInviteToTrade);
        UnknownLocal_-1593763559
        // Failed to decompile this line:
             // Failed to decompile this Function's code.
              at position 0 
 Message: Index was out of range. Must be non-negative and less than the size of the collection.
            Parameter name: index 

 StackTrace:    at System.ThrowHelper.ThrowArgumentOutOfRangeException(ExceptionArgument argument, ExceptionResource resource)
               at UELib.Core.UStruct.UByteCodeDecompiler.FormatTokens(Int32 beginIndex, Int32 endIndex) in E:\Development\Unreal-Library\src\ByteCodeDecompiler.cs:line 1544
               at UELib.Core.UStruct.UByteCodeDecompiler.Decompile() in E:\Development\Unreal-Library\src\ByteCodeDecompiler.cs:line 1492
}

protected function HandleInternetConnectionChanged(bool bConnected)
{
    // End:0x18
    if(bConnected)
    {
        SyncSkills();
    }
    //return;    
}

protected function HandlePrimaryPlayerIdChanged(GetAPlayerController InAccount, GetDefaultObject PlayerID)
{
    // End:0x22
    if(!IsInParty())
    {
        PartyLeader = PlayerID;
    }
    //return;    
}

protected function HandlePartySizeTracker(GetAPlayerController PartyObject)
{
    local int NewPartySize;

    NewPartySize = GetPartySize();
    // End:0xD2
    if(NewPartySize != CurrentPartySize)
    {
        EventPartySizeChanged(self, NewPartySize, CurrentPartySize);
        // End:0xB5
        if((CurrentPartySize > 1) && NewPartySize == 1)
        {
            LogInternal("Back down to one player, start party timeout", 'Party');
            StartPartyTimeout();
        }
        UpdatePartyLock();
        CurrentPartySize = NewPartySize;
    }
    //return;    
}

protected function HandlePlayerInvited(const out @NULL InLobbyId, const out GetDefaultObject FriendId, bool bAccepted)
{
    LogInternal(((((((((string(GetFuncName()) @ "bAccepted:'") $ string(bAccepted)) $ "'") @ "InLobbyId:'") $ UniqueLobbyIdToString(InLobbyId)) $ "'") @ "FriendId:'") $ UniqueNetIdToString(FriendId)) $ "'", 'Party');
    // End:0xE1
    if(bAccepted)
    {
        // End:0xE1
        if(Outer.CheckPsyNetConnection())
        {
            EventPlayerInvited(self, InLobbyId, FriendId);
        }
    }
    //return;    
}

function bool CreateParty(int LocalPlayerNum, int MaxPlayers, optional delegate<class> Handler)
{
    local array<string> LobbySettings;
    local int BuildID;

    // End:0x27
    if(IsInParty())
    {
        WarnInternal("Already in a party.");
        return false;
    }
    // End:0x7D
    if(EqualEqual_InterfaceInterface(OnlineSub.LobbyInterface, (none)))
    {
        WarnInternal("Lobby interface is invalid.");
        return false;
    }
    // End:0xA4
    if(!Outer.CheckPsyNetConnection())
    {
        return false;
    }
    MaxPartySize = MaxPlayers;
    // End:0x108
    if(!AllowNewMember())
    {
        OnPartyError(class'Errors_X'.default.CreatePartyFailedTeamFull.CreateError());
        return false;
    }
    UnknownLocal_1291777
    @NULL
    @NULL
    @NULL    
    @NULL
    @NULL
    )
    LobbySettings.Add(2);
    LobbySettings[0].Key = string('BuildID');
    LobbySettings[0].Value = string(BuildID);
    LobbySettings[1].Key = string('MaxPartySize');
    LobbySettings[1].Value = string(MaxPartySize);
    OnlineSub.LobbyInterface.AddCreateLobbyCompleteDelegate(OnPartyCreated);
    // End:0x2A5
    if(OnlineSub.LobbyInterface.CreateLobby(LocalPlayerNum, MaxPlayers, 2, LobbySettings))
    {
        SetProcessingStatus(1);
        return true;
        goto J0x2A7;
        return false;
        //return ReturnValue;
    }
    J0x2A7:    
}

protected function OnPartyCreated(bool bWasSuccessful, const out @NULL InPartyId, string Error)
{
    LogInternal(((((((((string(GetFuncName()) @ "bWasSuccessful:'") $ string(bWasSuccessful)) $ "'") @ "InPartyId:'") $ UniqueLobbyIdToString(InPartyId)) $ "'") @ "Error:'") $ Error) $ "'", 'Party');
    SetProcessingStatus(0);
    OnlineSub.LobbyInterface.ClearCreateLobbyCompleteDelegate(OnPartyCreated);
    // End:0x10C
    if(bWasSuccessful)
    {
        PartyID = InPartyId;
        BroadcastAllLocalPlayers();
        StartPartyTimeout();
    }
    // End:0x154
    else
    {
        OnPartyError(class'Errors_X'.default.CreatePartyFailed.CreateError(Error));
    }
    EventPartyCreated(self, bWasSuccessful);
    //return;    
}

protected function StartPartyTimeout()
{
    SetTimer(float(PartyTimeout), false, 'CheckPartyTimeout');
    //return;    
}

protected function CheckPartyTimeout()
{
    // End:0x67
    if(IsInParty())
    {
        // End:0x67
        if(GetPartySize() <= 1)
        {
            LogInternal("Party Time out occurred and no one is in the party", 'Party');
            LeaveParty();
        }
    }
    //return;    
}

function JoinParty(int LocalPlayerNum, const out @NULL InPartyId)
{
    // End:0x3B
    if(class'OnlineGame_X'.static.GetInstance().TrialExpired())
    {
        return;
    }
    // End:0x91
    if(EqualEqual_InterfaceInterface(OnlineSub.LobbyInterface, (none)))
    {
        WarnInternal("Lobby interface is invalid.");
        return;
    }
    PendingPartyLocalPlayerNum = LocalPlayerNum;
    PendingPartyId = InPartyId;
    Outer.Privileges.TryToPlayOnline(-1, HandleJoinPartyPrivilegeCheck);
    //return;    
}

private final function HandleJoinPartyPrivilegeCheck(IsInTransientPackage PrivilegeCheck)
{
    // End:0x24
    if(PrivilegeCheck.bHasRestriction)
    {
        return;
    }
    // End:0x7A
    if(OnlineSub.LobbyInterface.JoinLobby(PendingPartyLocalPlayerNum, PendingPartyId))
    {
        SetProcessingStatus(2);
    }
    //return;    
}

function bool IsInParty()
{
    local @NULL LobbyEmptyId, PlayerEmptyId;

    return PartyID != LobbyEmptyId;
    //return ReturnValue;    
}

function bool IsPartyLeader()
{
    return (IsInParty()) && IsMemberLocal(PartyLeader);
    //return ReturnValue;    
}

function bool AllPartyMembersInSameOnlineGame()
{
    local int I;

    I = 0;
    J0x0B:
    // End:0xF4 [Loop If]
    if(I < PartyMembers.Length)
    {
        // End:0xE6
        if(PartyMembers[I].MemberId == PartyMembers[I].PrimaryMemberId)
        {
            // End:0xE6
            if(((PartyMembers[I].NoMatchmakeReasons & (1 << 0)) != 0) && !IsInCurrentGame(PartyMembers[I].PrimaryMemberId))
            {
                return false;
            }
        }
        ++ I;
        // [Loop Continue]
        goto J0x0B;
    }
    return true;
    //return ReturnValue;    
}

function bool AllPartyMembersHaveAgreedToPrivacyNotice()
{
    local int I;

    I = 0;
    J0x0B:
    // End:0xBD [Loop If]
    if(I < PartyMembers.Length)
    {
        // End:0xAF
        if(PartyMembers[I].MemberId == PartyMembers[I].PrimaryMemberId)
        {
            // End:0xAF
            if((PartyMembers[I].NoMatchmakeReasons & (1 << 1)) != 0)
            {
                return false;
            }
        }
        ++ I;
        // [Loop Continue]
        goto J0x0B;
    }
    return true;
    //return ReturnValue;    
}

final function bool IsInCurrentGame(GetDefaultObject MemberId)
{
    local string GRI;

    // End:0x39
    if(Outer.JoinGame.IsJoiningGame())
    {
        return true;
    }
    GRI = GRI_X(class'WorldInfo'.static.GetWorldInfo().GRI);
    // End:0xB8
    if(GRI != none)
    {
        return GRI.PlayerIsInCurrentGame(MemberId);
    }
    return false;
    //return ReturnValue;    
}

function bool LeaveParty()
{
    local @NULL EmptyID;
    local GetDefaultObject MemberId;
    local int MemberIdx;

    // End:0x22
    if(!IsInParty())
    {
        WarnInternal("Not in a party.");
    }
    // End:0xB1
    if(NotEqual_InterfaceInterface(OnlineSub.LobbyInterface, (none)))
    {
        // End:0xB1
        if(OnlineSub.LobbyInterface.LeaveLobby(PartyID) == false)
        {
            WarnInternal("LeaveLobby failed.");
        }
    }
    MemberIdx = PartyMembers.Length - 1;
    J0xC8:
    // End:0x140 [Loop If]
    if(MemberIdx >= 0)
    {
        MemberId = PartyMembers[MemberIdx].MemberId;
        // End:0x132
        if(!IsMemberLocal(MemberId))
        {
            RemovePartyMemberByID(MemberId);
        }
        -- MemberIdx;
        // [Loop Continue]
        goto J0xC8;
    }
    PartyID = EmptyID;
    PartyLeader = GetLocalMemberId();
    OnPartyChanged();
    EventPartyDestroyed(self);
    return true;
    //return ReturnValue;    
}

function bool ShowInviteUI(byte LocalUserNum)
{
    LogInternal(string(GetFuncName()), 'Party');
    // End:0x3C
    if(!IsInParty())
    {
        WarnInternal("Not in a party.");
        return false;
    }
    // End:0x92
    if(EqualEqual_InterfaceInterface(OnlineSub.LobbyInterface, (none)))
    {
        WarnInternal("Lobby interface is invalid.");
        return false;
    }
    // End:0xE3
    if(!AllowNewMember())
    {
        OnPartyError(class'Errors_X'.default.InvitePlayerToPartyFailedPartyFull.CreateError());
        return false;
    }
    StartPartyTimeout();
    return OnlineSub.LobbyInterface.ShowInviteUI(LocalUserNum, PartyID);
    //return ReturnValue;    
}

function bool KickPlayer(GetDefaultObject PlayerID, byte Reason)
{
    local bool OnlinePlayer;

    OnlinePlayer = Outer.GetOnlinePlayerByID(PlayerID);
    // End:0xAB
    if(OnlinePlayer != none)
    {
        class'GameViewportClient_X'.static.GetInstance().RemovePlayerByID(OnlinePlayer.Outer.ControllerId);
        return true;
    }
    // End:0xD1
    if(!IsPartyLeader())
    {
        WarnInternal("Not party leader.");
        return false;
    }
    // End:0x103
    if(!IsPlayerInParty(PlayerID))
    {
        WarnInternal("Player not in party.");
        return false;
    }
    // End:0x18F
    if(NotEqual_InterfaceInterface(OnlineSub.LobbyInterface, (none)) && OnlineSub.LobbyInterface.KickPlayer(PartyID, PlayerID, Reason))
    {
        return true;
    }
    MessageComponent.CreateMessage(class'PartyMessage_Kick_X', self).SetKicked(PlayerID).SetInstigator(PartyLeader).SetReason(Reason).Broadcast();
    return true;
    //return ReturnValue;    
}

final function bool IsPlayerInParty(const out GetDefaultObject PlayerID)
{
    return PartyMembers.Find('MemberId', PlayerID) != -1;
    //return ReturnValue;    
}

final function bool IsPrimaryPlayer(const out GetDefaultObject PlayerID)
{
    return IsPrimaryPlayerIndex(PartyMembers.Find('MemberId', PlayerID));
    //return ReturnValue;    
}

final function bool IsPrimaryPlayerIndex(int MemberIdx)
{
    return (MemberIdx != -1) && PartyMembers[MemberIdx].PrimaryMemberId == PartyMembers[MemberIdx].MemberId;
    //return ReturnValue;    
}

function bool SetLeader(@NULL NewLeader)
{
    // End:0x26
    if(!IsPartyLeader())
    {
        WarnInternal("Not party leader.");
        return false;
    }
    // End:0x67
    if(NewLeader == PartyLeader)
    {
        WarnInternal("User is already party leader.");
        return false;
    }
    // End:0xD1
    if(OnlineSub.LobbyInterface.SetLobbyOwner(PartyID, NewLeader) == false)
    {
        WarnInternal("SetLobbyOwner() failed.");
        return false;
    }
    // End:0x168
    if(MessageComponent.CreateMessage(class'PartyMessage_NewLeader_X', self).SetLeader(NewLeader).Broadcast())
    {
        PartyLeader = NewLeader;
        OnPartyChanged();
        BroadcastMatchmakingAvailability();
        UpdatePartyLock();
        return true;
    }
    // End:0x16A
    else
    {
        return false;
    }
    //return ReturnValue;    
}

function HandleJoinGameComplete(bool bSuccess, string FailReason)
{
    // End:0x11
    if(!IsPartyLeader())
    {
        return;
    }
    // End:0x5F
    if(!bSuccess)
    {
        MessageComponent.CreateMessage(class'PartyMessage_JoinGame_X', self).Broadcast();
    }
    //return;    
}

protected function HandleServerReserved(bool bPrivateMatch)
{
    SetPartyServer(Outer.JoinGame.ServerBeaconAddress, Outer.JoinGame.ServerGameAddress, Outer.JoinGame.Settings.PlaylistId, bPrivateMatch, false, Outer.JoinGame.Settings.Password);
    //return;    
}

function SetPartyServer(string BeaconAddress, string GameAddress, int Playlist, bool bPrivateMatch, bool bFriendJoin, string Password)
{
    LastServerBeaconAddress = BeaconAddress;
    LastServerGameAddress = GameAddress;
    LastPlaylist = Playlist;
    LastbPrivateMatch = bPrivateMatch;
    LastPassword = Password;
    // End:0x72
    if(!IsPartyLeader())
    {
        return;
    }
    MessageComponent.CreateMessage(class'PartyMessage_JoinGame_X', self).SetBeaconIP(BeaconAddress).SetServerIP(GameAddress).SetPlaylist(Playlist).SetIsPrivateMatch(bPrivateMatch).SetIsFriendJoin(bFriendJoin).SetPassword(Password).Broadcast();
    //return;    
}

private final function BroadcastLastPartyServer()
{
    // End:0x4A
    if(Len(LastServerBeaconAddress) > 0)
    {
        SetPartyServer(LastServerBeaconAddress, LastServerGameAddress, LastPlaylist, LastbPrivateMatch, true, LastPassword);
    }
    //return;    
}

protected function HandlePartyJoinGame(GetAPlayerController Component, string MessageObject)
{
    LastJoinGameMessage = PartyMessage_JoinGame_X(MessageObject);
    LogInternal((string(GetFuncName()) @ "BeaconIP:'") $ LastJoinGameMessage.BeaconIP, 'Party');
    // End:0x2A7
    if(Len(LastJoinGameMessage.BeaconIP) > 0)
    {
        // End:0x261
        if(((Len(Outer.JoinGame.ServerGameAddress) > 0) && Outer.JoinGame.ServerGameAddress == LastJoinGameMessage.ServerIP) || Outer.JoinGame.ServerBeaconAddress == LastJoinGameMessage.BeaconIP)
        {
            LogInternal(((((("Ignoring join request, already in server" @ "JoinGame.ServerBeaconAddress:'") $ Outer.JoinGame.ServerBeaconAddress) $ "'") @ "JoinGame.ServerGameAddress:'") $ Outer.JoinGame.ServerGameAddress) $ "'", 'Party');
            return;
        }
        // End:0x29A
        if(LastJoinGameMessage.bIsFriendJoin)
        {
            EventConfirmJoinGameMessage(self);
        }
        // End:0x2A4
        else
        {
            HandleConfirmJoinGame();
        }
    }
    // End:0x33C
    else
    {
        // End:0x308
        if((Len(Outer.JoinGame.ServerBeaconAddress) > 0) && WantsToFollowTheLeaderOutOfGame())
        {
            EventLeaderLeftOnlineGame(self);
        }
        // End:0x33C
        else
        {
            Outer.JoinGame.CancelJoin();
        }
    }
    //return;    
}

protected function bool WantsToFollowTheLeaderOutOfGame()
{
    //return ReturnValue;    
}

final function HandleConfirmJoinGame()
{
    local GetDefaultObject Settings;

    // End:0x27
    if(!Outer.CheckPsyNetConnection())
    {
        return;
    }
    UnknownLocal_-1593763559
    // Failed to decompile this line:
         // Failed to decompile this Function's code.
          at position 0 
 Message: Index was out of range. Must be non-negative and less than the size of the collection.
        Parameter name: index 

 StackTrace:    at System.ThrowHelper.ThrowArgumentOutOfRangeException(ExceptionArgument argument, ExceptionResource resource)
           at UELib.Core.UStruct.UByteCodeDecompiler.FormatTokens(Int32 beginIndex, Int32 endIndex) in E:\Development\Unreal-Library\src\ByteCodeDecompiler.cs:line 1544
           at UELib.Core.UStruct.UByteCodeDecompiler.Decompile() in E:\Development\Unreal-Library\src\ByteCodeDecompiler.cs:line 1492
}

private final function HandlePartyJoinGameComplete(bool bSuccess, string FailReason)
{
    // End:0x2F
    if(!bSuccess)
    {
        EventPartyJoinGameError(self, FailReason);
    }
    // End:0x43
    else
    {
        EventPartyJoinGameSuccess(self);
    }
    //return;    
}

protected function HandleLobbyMemberStatusUpdate(const out @NULL LobbyInfo, int MemberIndex, int InstigatorIndex, string Status)
{
    LogInternal((((((((((((string(GetFuncName()) @ "LobbyUID:'") $ UniqueLobbyIdToString(LobbyInfo.LobbyUID)) $ "'") @ "MemberIndex:'") $ string(MemberIndex)) $ "'") @ "InstigatorIndex:'") $ string(InstigatorIndex)) $ "'") @ "Status:'") $ Status) $ "'", 'Party');
    // End:0xDD
    if(!IsInParty())
    {
        WarnInternal("Not in a party.");
        return;
    }
    // End:0x1A3
    if(LobbyInfo.LobbyUID != PartyID)
    {
        WarnInternal(((((("Received member update for incorrect lobby." @ "InLobbyUID:'") $ UniqueLobbyIdToString(LobbyInfo.LobbyUID)) $ "'") @ "PartyId:'") $ UniqueLobbyIdToString(PartyID)) $ "'");
        return;
    }
    UpdatePartyInfo(LobbyInfo);
    switch(Status)
    {
        // End:0x2C9
        case "Joined":
            // End:0x2B2
            if(IsPartyLeader())
            {
                // End:0x236
                if(IsPartyOverFull())
                {
                    KickPlayer(LobbyInfo.Members[MemberIndex].PlayerUID, 2);
                }
                // End:0x2B2
                else
                {
                    // End:0x2B2
                    if(Outer.Matchmaking.IsSearching())
                    {
                        KickPlayer(LobbyInfo.Members[MemberIndex].PlayerUID, 3);
                    }
                }
            }
            BroadcastMatchmakingAvailability();
            BroadcastDisableCrossPlay();
            // End:0x2CC
            break;
        // End:0xFFFF
        default:
            OnPartyChanged();
            //return;
    }    
}

protected function HandleJoinLobby(bool bWasSuccessful, const out @NULL LobbyInfo, const out GetDefaultObject LobbyUID, string Error)
{
    local int BuildID;
    local IsInTransientPackage JoinLobbyError;

    LogInternal(((((((((string(GetFuncName()) @ "bWasSuccessful:'") $ string(bWasSuccessful)) $ "'") @ "LobbyUID:'") $ UniqueLobbyIdToString(LobbyInfo.LobbyUID)) $ "'") @ "Error:'") $ Error) $ "'", 'Party');
    // End:0x21A
    if(bWasSuccessful)
    {
        // End:0x1DC
        if(TryGetValueInt(LobbyInfo.LobbySettings, string('BuildID'), BuildID))
        {
            // End:0x1DC
            if(BuildID != OnlineSub.GetBuildUniqueId())
            {
                LogInternal(((((string(GetFuncName()) @ "Build ID mismatch.") @ "Lobby BuildID:=") $ string(BuildID)) @ "Client BuildID=") $ string(OnlineSub.GetBuildUniqueId()), 'Party');
                LeaveParty();
                OnPartyError(class'Errors_X'.default.PartyBuildID.CreateError());
                return;
            }
        }
        UpdatePartyInfo(LobbyInfo);
        BroadcastLocalPlayers();
        BroadcastMatchmakingAvailability();
        BroadcastDisableCrossPlay();
        OnPartyChanged();
    }
    // End:0x42E
    else
    {
        // End:0x241
        if(!Outer.CheckPsyNetConnection())
        {
            return;
        }
        // End:0x29E
        if(Error ~= "NotAllowed")
        {
            JoinLobbyError = class'Errors_X'.default.JoinPartyFailedNotAllowed.CreateError();
        }
        // End:0x41B
        else
        {
            // End:0x2F5
            if(Error ~= "Full")
            {
                JoinLobbyError = class'Errors_X'.default.JoinPartyFailedPartyFull.CreateError();
            }
            // End:0x41B
            else
            {
                // End:0x353
                if(Error ~= "DoesntExist")
                {
                    JoinLobbyError = class'Errors_X'.default.JoinPartyFailedNotJoinable.CreateError();
                }
                // End:0x41B
                else
                {
                    WarnInternal(Error);
                    JoinLobbyError = class'Errors_X'.default.JoinPartyFailed.CreateError(Error);
                    class'BugReport_X'.static.StaticSubmitBugReport("JOIN" @ Error);
                    Outer.Analytics.RecordPartyError("JOIN" @ Error);
                }
            }
        }
        OnPartyError(JoinLobbyError);
    }
    //return;    
}

private final function UpdatePartyInfo(const out DumpUnreferencedAnims Lobby)
{
    local int PartyMemberIdx, LocalPlayerIdx, LobbyMemberIdx;
    local bool bSomebodyJoined;
    local @NULL PrimaryMemberId;
    local GetAPlayerController playerToAdd;

    OnlineSub.LobbyInterface.GetLobbyAdmin(Lobby.LobbyUID, PartyLeader);
    PartyID = Lobby.LobbyUID;
    TryGetValueInt(Lobby.LobbySettings, string('MaxPartySize'), MaxPartySize);
    PartyMemberIdx = PartyMembers.Length - 1;
    J0xD1:
    // End:0x24E [Loop If]
    if(PartyMemberIdx >= 0)
    {
        // End:0x240
        if(IsPrimaryPlayerIndex(PartyMemberIdx))
        {
            // End:0x240
            if(Lobby.Members.Find('PlayerUID', PartyMembers[PartyMemberIdx].MemberId) == -1)
            {
                PrimaryMemberId = PartyMembers[PartyMemberIdx].PrimaryMemberId;
                LocalPlayerIdx = PartyMembers.Length - 1;
                J0x196:
                // End:0x240 [Loop If]
                if(LocalPlayerIdx >= 0)
                {
                    // End:0x232
                    if(PartyMembers[LocalPlayerIdx].PrimaryMemberId == PrimaryMemberId)
                    {
                        RemovePartyMemberByID(PartyMembers[LocalPlayerIdx].MemberId);
                        // End:0x232
                        if(LocalPlayerIdx < PartyMemberIdx)
                        {
                            -- PartyMemberIdx;
                        }
                    }
                    -- LocalPlayerIdx;
                    // [Loop Continue]
                    goto J0x196;
                }
            }
        }
        -- PartyMemberIdx;
        // [Loop Continue]
        goto J0xD1;
    }
    bSomebodyJoined = false;
    LobbyMemberIdx = 0;
    J0x265:
    // End:0x3B9 [Loop If]
    if(LobbyMemberIdx < Lobby.Members.Length)
    {
        // End:0x3AB
        if(PartyMembers.Find('MemberId', Lobby.Members[LobbyMemberIdx].PlayerUID) == -1)
        {
            AddPartyMember(Lobby.Members[LobbyMemberIdx].PlayerUID, Lobby.Members[LobbyMemberIdx].PlayerUID, Lobby.Members[LobbyMemberIdx].OnlineName);
            bSomebodyJoined = true;
        }
        ++ LobbyMemberIdx;
        // [Loop Continue]
        goto J0x265;
    }
    PartyMemberIdx = 0;
    J0x3C4:
    // End:0x4B1 [Loop If]
    if(PartyMemberIdx < PartyMembers.Length)
    {
        // End:0x4A3
        if(Lobby.Members.Find('PlayerUID', PartyMembers[PartyMemberIdx].MemberId) == -1)
        {
            playerToAdd = PartyMembers[PartyMemberIdx].MemberId;
            OnlineSub.LobbyInterface.AddLocalPartyMemberToSession(playerToAdd);
        }
        ++ PartyMemberIdx;
        // [Loop Continue]
        goto J0x3C4;
    }
    // End:0x4C8
    if(bSomebodyJoined)
    {
        BroadcastAllLocalPlayers();
    }
    //return;    
}

protected function int AddPartyMember(@NULL PrimaryMemberId, GetDefaultObject MemberId, string MemberName, optional int ControllerId)
{
    local int MemberIdx;

    ControllerId = -1;
    MemberIdx = PartyMembers.Find('MemberId', MemberId);
    // End:0x184
    if(MemberIdx == -1)
    {
        MemberIdx = PartyMembers.Length;
        PartyMembers.Add(1);
        PartyMembers[MemberIdx].PrimaryMemberId = PrimaryMemberId;
        PartyMembers[MemberIdx].MemberId = MemberId;
        PartyMembers[MemberIdx].LocalControllerId = ControllerId;
        // End:0x11E
        if(UniqueNetIDIsValid(MemberId))
        {
            SyncPlayerSkill(MemberId);
        }
        // End:0x146
        if((IsPartyLeader()) && !IsPartyOverFull())
        {
            BroadcastLastPartyServer();
        }
        OnlineSub.LobbyInterface.AddLocalPartyMemberToSession(MemberId);
    }
    PartyMembers[MemberIdx].PrimaryMemberId = PrimaryMemberId;
    PartyMembers[MemberIdx].MemberName = MemberName;
    return MemberIdx;
    //return ReturnValue;    
}

protected function RemovePrimaryPartyMember(const out @NULL PrimaryMemberId)
{
    local int MemberIdx;

    MemberIdx = PartyMembers.Length - 1;
    J0x17:
    // End:0x84 [Loop If]
    if(MemberIdx >= 0)
    {
        // End:0x76
        if(PartyMembers[MemberIdx].PrimaryMemberId == PrimaryMemberId)
        {
            PartyMembers.Remove(MemberIdx, 1);
        }
        -- MemberIdx;
        // [Loop Continue]
        goto J0x17;
    }
    //return;    
}

protected function RemovePartyMemberByID(GetDefaultObject MemberId)
{
    local int MemberIdx;

    MemberIdx = PartyMembers.Find('MemberId', MemberId);
    // End:0x51
    if(MemberIdx != -1)
    {
        PartyMembers.Remove(MemberIdx, 1);
    }
    //return;    
}

protected function RemovePartyMemberByLocalPlayer(GetAPlayerController Player)
{
    local int MemberIdx;

    MemberIdx = PartyMembers.Find('LocalControllerId', Player.ControllerId);
    // End:0x66
    if(MemberIdx != -1)
    {
        PartyMembers.Remove(MemberIdx, 1);
    }
    //return;    
}

protected function RemoveAllPartyMembers()
{
    PartyMembers.Length = 0;
    //return;    
}

protected function HandleLobbyReceiveBinaryData(const out @NULL LobbyInfo, int MemberIndex, const out array Data)
{
    LogInternal((((((((((string(GetFuncName()) @ "LobbyUID=") $ UniqueLobbyIdToString(LobbyInfo.LobbyUID)) @ "MemberIndex:'") $ string(MemberIndex)) $ "'") @ "PlayerUID=") $ UniqueNetIdToString(LobbyInfo.Members[MemberIndex].PlayerUID)) @ "Data.Length:'") $ string(Data.Length)) $ "'", 'Party');
    // End:0x122
    if(class'OnlineGame_X'.static.GetInstance().TrialExpired())
    {
        return;
    }
    // End:0x19B
    if(LobbyInfo.Members[MemberIndex].PlayerUID != GetLocalMemberId())
    {
        MessageComponent.DeserializeMessage(Data,, self);
    }
    //return;    
}

protected function HandleLobbyDestroyed(const out @NULL LobbyId, byte Reason)
{
    local DumpUnreferencedAnims Error;

    LogInternal(((((string(GetFuncName()) @ "LobbyUID=") $ UniqueLobbyIdToString(LobbyId)) @ "Reason:'") $ string(Reason)) $ "'", 'Party');
    switch(Reason)
    {
        // End:0xBD
        case 5:
            Error = class'Errors_X'.default.KickedFromParty.CreateError("User Left");
            // End:0x351
            break;
        // End:0x117
        case 6:
            Error = class'Errors_X'.default.KickedFromParty.CreateError("Owner Disappeared");
            // End:0x351
            break;
        // End:0x1C6
        case 7:
            // End:0x183
            if(!Outer.HasInternetConnection())
            {
                Error = class'Errors_X'.default.OSCS_NoNetworkConnection.CreateError();
            }
            // End:0x1C3
            else
            {
                Error = class'Errors_X'.default.PartyDestroyedConnectionError.CreateError();
            }
            // End:0x351
            break;
        // End:0x25D
        case 8:
            // End:0x24E
            if(OnlineSub.SystemInterface.GetCurrentConnectionStatus() != 1)
            {
                Error = class'Errors_X'.default.PartyDestroyedSignedOut.CreateError();
            }
            // End:0x25A
            else
            {
                LeaveParty();
                return;
            }
            // End:0x351
            break;
        // End:0x2A5
        case 1:
            Error = class'Errors_X'.default.KickedFromParty.CreateError();
            // End:0x351
            break;
        // End:0x2ED
        case 2:
            Error = class'Errors_X'.default.JoinPartyFailedPartyFull.CreateError();
            // End:0x351
            break;
        // End:0xFFFF
        default:
            Error = class'Errors_X'.default.KickedFromParty.CreateError("Party Destroyed:" @ string(Reason));
            // End:0x351
            break;
    }
    OnPartyError(Error);
    LeaveParty();
    //return;    
}

protected function HandleKickMessage(GetAPlayerController Component, class Message)
{
    local GetAPlayerController KickMessage;
    local DumpUnreferencedAnims Error;

    KickMessage = PartyMessage_Kick_X(Message);
    LogInternal((((((string(GetFuncName()) @ "KickedPlayer:'") $ class'OnlineSubsystem'.static.UniqueNetIdToString(KickMessage.KickPlayer)) $ "'") @ "Instigator:'") $ class'OnlineSubsystem'.static.UniqueNetIdToString(KickMessage.Instigator)) $ "'", 'Party');
    // End:0x152
    if(!IsMemberLocal(KickMessage.KickPlayer))
    {
        LogInternal(string(GetFuncName()) @ "KickPlayer is not local, ignoring message", 'Party');
        return;
    }
    // End:0x1AA
    if(KickMessage.Instigator != PartyLeader)
    {
        WarnInternal("Instigator is not party leader.");
        return;
    }
    // End:0x1FD
    if(KickMessage.KickPlayer == PartyLeader)
    {
        WarnInternal("Can not kick party leader.");
        return;
    }
    LeaveParty();
    switch(KickMessage.KickReason)
    {
        // End:0x277
        case 2:
            Error = class'Errors_X'.default.JoinPartyFailedPartyFull.CreateError();
            // End:0x34D
            break;
        // End:0x2BF
        case 3:
            Error = class'Errors_X'.default.JoinPartyFailedPartyMatchmaking.CreateError();
            // End:0x34D
            break;
        // End:0x307
        case 4:
            Error = class'Errors_X'.default.JoinPartyFailedPartyInGame.CreateError();
            // End:0x34D
            break;
        // End:0xFFFF
        default:
            Error = class'Errors_X'.default.KickedFromParty.CreateError();
            // End:0x34D
            break;
    }
    OnPartyError(Error);
    //return;    
}

protected function HandleNewLeader(GetAPlayerController Component, class Message)
{
    local string LeaderMessage;

    LeaderMessage = PartyMessage_NewLeader_X(Message);
    LogInternal(((string(GetFuncName()) @ "NewLeader:'") $ class'OnlineSubsystem'.static.UniqueNetIdToString(LeaderMessage.NewLeader)) $ "'", 'Party');
    PartyLeader = LeaderMessage.NewLeader;
    OnPartyChanged();
    // End:0xD1
    if(IsPartyLeader())
    {
        SyncSkills();
    }
    //return;    
}

final function bool HasRemoteMember()
{
    local int MemberIdx;

    MemberIdx = PartyMembers.Length - 1;
    J0x17:
    // End:0x6B [Loop If]
    if(MemberIdx >= 0)
    {
        // End:0x5D
        if(!IsMemberLocal(PartyMembers[MemberIdx].PrimaryMemberId))
        {
            return true;
        }
        -- MemberIdx;
        // [Loop Continue]
        goto J0x17;
    }
    return false;
    //return ReturnValue;    
}

final function bool IsMemberLocal(GetDefaultObject MemberId)
{
    return Outer.IsOnlinePlayerID(MemberId);
    //return ReturnValue;    
}

final function GetAPlayerController GetLocalMemberId()
{
    return Outer.Account.PrimaryPlayer.PlayerID;
    //return ReturnValue;    
}

function SetSearchState(name SearchState)
{
    LastSearchState = SearchState;
    GetSearchStatusMessage().SetSearchState(SearchState).SetIsSearching(LastbSearchingStatus);
    //return;    
}

function SetMatchmakingSearching(bool bState)
{
    LastbSearchingStatus = bState;
    GetSearchStatusMessage().SetIsSearching(bState).SetSearchState(LastSearchState);
    //return;    
}

protected function OnNewGame()
{
    UpdatePartyLock();
    BroadcastMatchmakingAvailability();
    //return;    
}

function OnNewSettingsChosen(int PlaylistId)
{
    UpdatePartyLock();
    //return;    
}

function OnNewGameInfoCreated(GetLanguageExtension Game)
{
    // End:0x17
    if(IsInMainMenu())
    {
        ClearLastServerAddress();
    }
    //return;    
}

private final function ClearLastServerAddress()
{
    LastServerGameAddress = "";
    LastServerBeaconAddress = "";
    //return;    
}

private final function UpdatePartyLock()
{
    local bool NewLockStatus;

    // End:0x107
    if((IsInParty()) && IsPartyLeader())
    {
        NewLockStatus = Outer.Matchmaking.IsSearching() || !AllowNewMember();
        LogInternal(((string(GetFuncName()) @ "NewLockStatus:'") $ string(NewLockStatus)) $ "'", 'Party');
        OnlineSub.LobbyInterface.SetLobbyLock(PartyID, NewLockStatus);
        LastLockStatus = NewLockStatus;
    }
    //return;    
}

private final function bool AllowNewMember()
{
    return AllowPartySize(GetPartySize() + 1);
    //return ReturnValue;    
}

private final function bool IsPartyOverFull()
{
    return !AllowPartySize(GetPartySize());
    //return ReturnValue;    
}

private final function bool AllowPartySize(int InSize)
{
    return InSize <= GetMaxPartySize();
    //return ReturnValue;    
}

final function int GetMaxPartySize()
{
    // End:0xB1
    if(((class'WorldInfo'.static.GetWorldInfo().NetMode == NM_Standalone) || Outer.GameSettings == none) || Outer.GameSettings.HasSetting('PrivateMatch'))
    {
        return MaxPartySize;
    }
    return Outer.GameSettings.NumPublicConnections / 2;
    //return ReturnValue;    
}

function bool TogglePartyLock()
{
    // End:0x24
    if(!IsInParty())
    {
        WarnInternal("Not in a party.");
        return false;
    }
    // End:0x4A
    if(!IsPartyLeader())
    {
        WarnInternal("Not party leader.");
        return false;
    }
    LastLockStatus = !LastLockStatus;
    LogInternal(((string(GetFuncName()) @ "LastLockStatus:'") $ string(LastLockStatus)) $ "'", 'Party');
    return OnlineSub.LobbyInterface.SetLobbyLock(PartyID, LastLockStatus);
    //return ReturnValue;    
}

protected function GetAPlayerController GetSearchStatusMessage()
{
    // End:0x19
    if(!IsPartyLeader())
    {
        return NullSearchStatus;
    }
    // End:0x5B
    if(PendingSearchStatus == none)
    {
        PendingSearchStatus = MessageComponent.CreateMessage(class'PartyMessage_SearchStatus_X', self);
    }
    SetTimer(0.10, false, 'BroadcastSearchStatus', self);
    return PendingSearchStatus;
    //return ReturnValue;    
}

private final function BroadcastSearchStatus()
{
    // End:0x39
    if(PendingSearchStatus != none)
    {
        PendingSearchStatus.Broadcast();
        PendingSearchStatus = none;
    }
    //return;    
}

protected function HandleSearchStatus(GetAPlayerController Component, class Message)
{
    local string StatusMessage;

    StatusMessage = PartyMessage_SearchStatus_X(Message);
    LogInternal((((((string(GetFuncName()) @ "StatusMessage.SearchState:'") $ string(StatusMessage.SearchState)) $ "'") @ "StatusMessage.bIsSearching:'") $ string(StatusMessage.bIsSearching)) $ "'", 'Party');
    // End:0xD1
    if(IsPartyLeader())
    {
        return;
    }
    EventSearchStatusChanged(self, StatusMessage);
    //return;    
}

final function int GetPartySize()
{
    return PartyMembers.Length;
    //return ReturnValue;    
}

function bool AllowSplitScreenPlayer(int ControllerId, out GetDefaultObject OutError)
{
    // End:0x11
    if(!IsInParty())
    {
        return true;
    }
    // End:0x75
    if(!AllowNewMember())
    {
        OutError = class'Errors_X'.default.CreatePlayerFailedPartyFull.CreateError();
        OnPartyError(OutError);
        return false;
    }
    return true;
    //return ReturnValue;    
}

protected function HandleLocalPlayers(GetAPlayerController Component, class ObjMessage)
{
    local class Message;

    Message = PartyMessage_LocalPlayers_X(ObjMessage);
    LogInternal((((("Handle PartyMessage_LocalPlayers_X: IsPartyLeader=" $ string(IsPartyLeader())) @ "bFromLeader=") $ string(Message.bFromLeader)) @ "IsPrimaryPlayer=") $ string(IsPrimaryPlayer(Message.PrimaryMemberId)), 'Party');
    // End:0x10D
    if((IsPartyLeader()) == Message.bFromLeader)
    {
        return;
    }
    // End:0x1C8
    if(IsPrimaryPlayer(Message.PrimaryMemberId))
    {
        ProcessLocalPlayersMessage(Message);
        // End:0x1C8
        if(IsPartyLeader())
        {
            // End:0x192
            if(IsPartyOverFull())
            {
                KickPlayer(Message.PrimaryMemberId, 2);
            }
            // End:0x1C8
            else
            {
                Message.SetFromLeader(true).Broadcast();
            }
        }
    }
    //return;    
}

protected function ProcessLocalPlayersMessage(class Message)
{
    local int LocalPlayerIdx, PartyMemberIdx;

    PartyMemberIdx = PartyMembers.Length - 1;
    J0x17:
    // End:0x15F [Loop If]
    if(PartyMemberIdx >= 0)
    {
        // End:0x151
        if(PartyMembers[PartyMemberIdx].PrimaryMemberId == Message.PrimaryMemberId)
        {
            // End:0x151
            if(PartyMembers[PartyMemberIdx].MemberId != Message.PrimaryMemberId)
            {
                // End:0x151
                if(Message.Members.Find('MemberId', PartyMembers[PartyMemberIdx].MemberId) == -1)
                {
                    RemovePartyMemberByID(PartyMembers[PartyMemberIdx].MemberId);
                }
            }
        }
        -- PartyMemberIdx;
        // [Loop Continue]
        goto J0x17;
    }
    LocalPlayerIdx = 0;
    J0x16A:
    // End:0x244 [Loop If]
    if(LocalPlayerIdx < Message.Members.Length)
    {
        AddPartyMember(Message.PrimaryMemberId, Message.Members[LocalPlayerIdx].MemberId, Message.Members[LocalPlayerIdx].MemberName);
        ++ LocalPlayerIdx;
        // [Loop Continue]
        goto J0x16A;
    }
    OnPartyChanged();
    //return;    
}

protected function HandleLocalPlayerJoin(GetAPlayerController Player)
{
    AddPartyMember(GetLocalMemberId(), Player.GetUniqueNetId(), Player.GetNickname(), Player.ControllerId);
    BroadcastLocalPlayers();
    OnPartyChanged();
    //return;    
}

protected function HandleLocalPlayerLeave(GetAPlayerController Player)
{
    RemovePartyMemberByLocalPlayer(Player);
    BroadcastLocalPlayers();
    OnPartyChanged();
    //return;    
}

protected function HandleLocalPlayerLoginStatusChanged(GetAPlayerController Player)
{
    local int LocalMemberIdx;

    LocalMemberIdx = PartyMembers.Find('LocalControllerId', Player.Outer.ControllerId);
    // End:0x1B7
    if((LocalMemberIdx != -1) && PartyMembers[LocalMemberIdx].MemberId != Player.PlayerID)
    {
        PartyMembers[LocalMemberIdx].MemberId = Player.PlayerID;
        // End:0x164
        if(Player.IsPrimaryPlayer())
        {
            PartyMembers[LocalMemberIdx].PrimaryMemberId = Player.PlayerID;
        }
        // End:0x1B7
        if(UniqueNetIDIsValid(Player.PlayerID))
        {
            SyncPlayerSkill(Player.PlayerID);
        }
    }
    LogInternal((((((((((string(GetFuncName()) @ "PlayerName=") $ Player.GetLocalName()) @ "PlayerID=") $ UniqueNetIdToString(Player.PlayerID)) @ "LoginStatus=") $ string(Player.LoginStatus)) @ "IsPrimary=") $ string(Player.IsPrimaryPlayer())) @ "IsInParty=") $ string(IsInParty()), 'Party');
    switch(Player.LoginStatus)
    {
        // End:0x381
        case 0:
            // End:0x356
            if(Player.IsPrimaryPlayer())
            {
                // End:0x326
                if(IsInParty())
                {
                    HandleLobbyDestroyed(PartyID, 8);
                }
                // End:0x354
                if(class'WorldInfo'.static.IsConsoleBuild(12))
                {
                    RemoveAllPartyMembers();
                }
                return;
            }
            RemovePartyMemberByID(Player.PlayerID);
            // End:0x4F6
            break;
        // End:0x45D
        case 1:
            // End:0x3CC
            if(Player.IsPrimaryPlayer())
            {
                // End:0x3CA
                if(IsInParty())
                {
                    HandleLobbyDestroyed(PartyID, 8);
                }
                return;
            }
            LocalMemberIdx = AddPartyMember(GetLocalMemberId(), Player.PlayerID, Player.GetLocalName(), Player.Outer.ControllerId);
            // End:0x4F6
            break;
        // End:0x4F3
        case 2:
            LocalMemberIdx = AddPartyMember(GetLocalMemberId(), Player.PlayerID, Player.GetLocalName(), Player.Outer.ControllerId);
            // End:0x4F6
            break;
        // End:0xFFFF
        default:
            BroadcastLocalPlayers();
            OnPartyChanged();
            // End:0x5EA
            if(!bCheckedCommandLine)
            {
                // End:0x5EA
                if((Outer.Account.PrimaryPlayer != none) && Outer.Account.PrimaryPlayer.IsLoggedIn())
                {
                    bCheckedCommandLine = true;
                    JoinCommandLineParty(Player.Outer.ControllerId);
                }
            }
            //return;
    }    
}

protected function JoinCommandLineParty(int LocalPlayerNum)
{
    local GetAPlayerController JoinPartyID;
    local Qword LobbyId;

    // End:0x81
    if(class'EngineShare_X'.static.ParseCommandlineQWORD("+connect_lobby ", LobbyId))
    {
        JoinPartyID.Platform = 1;
        JoinPartyID.Uid = LobbyId;
    }
    // End:0xB3
    if(UniqueLobbyIDIsSet(JoinPartyID))
    {
        JoinParty(LocalPlayerNum, JoinPartyID);
    }
    //return;    
}

private final function BroadcastLocalPlayers()
{
    // End:0x27
    if(IsInParty())
    {
        SetTimer(0.10, false, 'BroadcastLocalPlayersDelayed');
    }
    //return;    
}

private final function BroadcastLocalPlayersDelayed()
{
    MessageComponent.CreateMessage(class'PartyMessage_LocalPlayers_X', self).AddOnlinePlayers().SetFromLeader(IsPartyLeader()).Broadcast();
    //return;    
}

protected function BroadcastAllLocalPlayers()
{
    local class Message;
    local int PrimaryMemberIdx, LocalPlayerIdx;

    Message = none;
    // End:0x1FF
    if(IsPartyLeader())
    {
        PrimaryMemberIdx = 0;
        J0x23:
        // End:0x1FF [Loop If]
        if(PrimaryMemberIdx < PartyMembers.Length)
        {
            // End:0x1F1
            if(IsPrimaryPlayerIndex(PrimaryMemberIdx))
            {
                LocalPlayerIdx = 0;
                J0x5C:
                // End:0x1B8 [Loop If]
                if(LocalPlayerIdx < PartyMembers.Length)
                {
                    // End:0x1AA
                    if(LocalPlayerIdx != PrimaryMemberIdx)
                    {
                        // End:0x1AA
                        if(PartyMembers[LocalPlayerIdx].PrimaryMemberId == PartyMembers[PrimaryMemberIdx].PrimaryMemberId)
                        {
                            // End:0x178
                            if(Message == none)
                            {
                                Message = MessageComponent.CreateMessage(class'PartyMessage_LocalPlayers_X', self).SetPrimaryMemberId(PartyMembers[PrimaryMemberIdx].PrimaryMemberId).SetFromLeader(true);
                            }
                            Message.AddMember(PartyMembers[LocalPlayerIdx]);
                        }
                    }
                    ++ LocalPlayerIdx;
                    // [Loop Continue]
                    goto J0x5C;
                }
                // End:0x1F1
                if(Message != none)
                {
                    Message.Broadcast();
                    Message = none;
                }
            }
            ++ PrimaryMemberIdx;
            // [Loop Continue]
            goto J0x23;
        }
    }
    //return;    
}

protected final function BroadcastMatchmakingAvailability()
{
    local int NoMatchmakeReasons;

    // End:0x12C
    if(IsInParty())
    {
        NoMatchmakeReasons = BuildNoMatchmakingReasons();
        LogInternal((((((string(GetFuncName()) @ "PartyMemberID:'") $ UniqueNetIdToString(GetLocalMemberId())) $ "'") @ "NoMatchmakeReasons:'") $ string(NoMatchmakeReasons)) $ "'", 'Party');
        MessageComponent.CreateMessage(class'PartyMessage_MatchmakingAvailability_X', self).SetMemberId(GetLocalMemberId()).SetNoMatchmakeReasons(NoMatchmakeReasons).Broadcast();
        SetAvailableForMatchmakingForMember(GetLocalMemberId(), NoMatchmakeReasons);
    }
    //return;    
}

protected function int BuildNoMatchmakingReasons()
{
    // End:0x12
    if(IsInOnlineGame())
    {
        return 1 << 0;
    }
    return 0;
    //return ReturnValue;    
}

protected function HandleMatchmakingAvailability(GetAPlayerController Component, class Message)
{
    local GetDefaultObject MatchmakingAvailibilityMessage;

    MatchmakingAvailibilityMessage = PartyMessage_MatchmakingAvailability_X(Message);
    SetAvailableForMatchmakingForMember(MatchmakingAvailibilityMessage.MemberId, MatchmakingAvailibilityMessage.NoMatchmakeReasons);
    //return;    
}

private final function SetAvailableForMatchmakingForMember(@NULL PartyMemberID, int NoMatchmakeReasons)
{
    local int PartyMemberIndex;

    LogInternal((((((string(GetFuncName()) @ "PartyMemberID:'") $ class'OnlineSubsystem'.static.UniqueNetIdToString(PartyMemberID)) $ "'") @ "NoMatchmakeReasons:'") $ string(NoMatchmakeReasons)) $ "'", 'Party');
    PartyMemberIndex = PartyMembers.Find('MemberId', PartyMemberID);
    // End:0xF3
    if(PartyMemberIndex > -1)
    {
        PartyMembers[PartyMemberIndex].NoMatchmakeReasons = NoMatchmakeReasons;
    }
    // End:0x136
    else
    {
        WarnInternal("Unable to find party member for Matchmaking availability update");
    }
    //return;    
}

protected final function BroadcastDisableCrossPlay()
{
    local @NULL PartyMemberID;
    local int PartyMemberIndex;

    // End:0x1A5
    if(IsInParty())
    {
        PartyMemberID = GetLocalMemberId();
        PartyMemberIndex = PartyMembers.Find('MemberId', PartyMemberID);
        // End:0x1A5
        if(PartyMemberIndex > -1)
        {
            LogInternal((((((string(GetFuncName()) @ "PartyMemberID:'") $ UniqueNetIdToString(PartyMemberID)) $ "'") @ "PartyMembers[ PartyMemberIndex ].bDisableCrossPlay:'") $ string(PartyMembers[PartyMemberIndex].bDisableCrossPlay)) $ "'", 'Party');
            MessageComponent.CreateMessage(class'PartyMessage_DisableCrossPlay_X', self).SetMemberId(PartyMemberID).SetDisableCrossPlay(PartyMembers[PartyMemberIndex].bDisableCrossPlay).Broadcast();
        }
    }
    //return;    
}

protected function HandleDisableCrossPlayMessage(GetAPlayerController Component, class Message)
{
    local int DisableCrossPlayMessage;

    DisableCrossPlayMessage = PartyMessage_DisableCrossPlay_X(Message);
    SetDisableCrossPlayForMember(DisableCrossPlayMessage.MemberId, DisableCrossPlayMessage.bDisableCrossPlay);
    //return;    
}

protected final function SetDisableCrossPlayForMember(@NULL PartyMemberID, bool bDisableCrossPlay)
{
    local int PartyMemberIndex;

    PartyMemberIndex = PartyMembers.Find('MemberId', PartyMemberID);
    // End:0xBB
    if(PartyMemberIndex > -1)
    {
        // End:0xB8
        if(PartyMembers[PartyMemberIndex].bDisableCrossPlay != bDisableCrossPlay)
        {
            PartyMembers[PartyMemberIndex].bDisableCrossPlay = bDisableCrossPlay;
            EventDisableCrossPlayChanged(self);
        }
    }
    // End:0xF8
    else
    {
        WarnInternal("Unable to find party member for Disable Cross Play update");
    }
    //return;    
}

function bool PartyHasDisableCrossPlay()
{
    local int I;

    I = 0;
    J0x0B:
    // End:0x5D [Loop If]
    if(I < GetPartySize())
    {
        // End:0x4F
        if(PartyMembers[I].bDisableCrossPlay)
        {
            return true;
        }
        ++ I;
        // [Loop Continue]
        goto J0x0B;
    }
    return false;
    //return ReturnValue;    
}

function bool TryGetValueInt(const out array MetaData, coerce string Key, out int Value)
{
    local int KeyIdx;

    KeyIdx = MetaData.Find('Key', Key);
    // End:0x70
    if(KeyIdx != -1)
    {
        Value = int(MetaData[KeyIdx].Value);
        return true;
    }
    return false;
    //return ReturnValue;    
}

protected function bool UseGroupMMR()
{
    return false;
    //return ReturnValue;    
}

protected function OnPartyChanged()
{
    SetProcessingStatus(0);
    // End:0x23
    if(UseGroupMMR())
    {
        SyncGroupSkills();
    }
    EventPartyChanged(self);
    //return;    
}

protected function SyncPlayerSkill(GetDefaultObject MemberId)
{
    // End:0x0F
    if(UseGroupMMR())
    {
        return;
    }
    Outer.Skill.SyncPlayerSkill(MemberId);
    //return;    
}

function SyncSkills(optional bool bFromCache)
{
    // End:0x4A
    if((bFromCache && LastSkillSyncTime > 0.0) && GetCurrentTime() < (LastSkillSyncTime + SkillCacheTime))
    {
        return;
    }
    LastSkillSyncTime = GetCurrentTime();
    // End:0x78
    if(UseGroupMMR())
    {
        SyncGroupSkills();
    }
    // End:0x82
    else
    {
        SyncIndividualSkills();
    }
    //return;    
}

protected function SyncGroupSkills()
{
    Outer.SkillGroups.SyncGroupSkill(GetPartyMemberIDs());
    //return;    
}

protected function SyncIndividualSkills()
{
    local int MemberIdx;
    local GetDefaultObject MemberId;

    MemberIdx = 0;
    J0x0B:
    // End:0xAF [Loop If]
    if(MemberIdx < PartyMembers.Length)
    {
        MemberId = PartyMembers[MemberIdx].MemberId;
        // End:0xA1
        if(UniqueNetIDIsValid(MemberId))
        {
            // End:0xA1
            if((IsPartyLeader()) || IsMemberLocal(MemberId))
            {
                SyncPlayerSkill(MemberId);
            }
        }
        ++ MemberIdx;
        // [Loop Continue]
        goto J0x0B;
    }
    //return;    
}

function SyncUpdatedSkills()
{
    SetTimer(3.0, false, 'SyncSkills');
    //return;    
}

function float GetSkill(int Playlist)
{
    // End:0x24
    if(UseGroupMMR())
    {
        return GetGroupSkill(Playlist);
    }
    // End:0x38
    else
    {
        return GetAverageSkill(Playlist);
    }
    //return ReturnValue;    
}

protected function float GetGroupSkill(int Playlist)
{
    local @NULL Rating;

    Rating = Outer.SkillGroups.GetGroupSkillRating(GetPartyMemberIDs(), Playlist);
    return Outer.Skill.GetMMR(Rating.Mu, Rating.Sigma);
    //return ReturnValue;    
}

protected function float GetAverageSkill(int Playlist)
{
    local int MemberIdx;
    local @NULL Rating;
    local float SumMu, SumSigmaSq, InvNumMembers;

    // End:0x199
    if(PartyMembers.Length > 0)
    {
        MemberIdx = 0;
        J0x1B:
        // End:0x11A [Loop If]
        if(MemberIdx < PartyMembers.Length)
        {
            Rating = Outer.Skill.GetPlayerRating(PartyMembers[MemberIdx].MemberId, Playlist);
            SumMu += Rating.Mu;
            SumSigmaSq += (Rating.Sigma * Rating.Sigma);
            ++ MemberIdx;
            // [Loop Continue]
            goto J0x1B;
        }
        InvNumMembers = 1.0 / float(PartyMembers.Length);
        return Outer.Skill.GetMMR(SumMu * InvNumMembers, Sqrt(SumSigmaSq * InvNumMembers));
    }
    // End:0x2C8
    else
    {
        // End:0x25B
        if(Outer.Account.PrimaryPlayer != none)
        {
            return Outer.Skill.GetPlayerMMR(Outer.Account.PrimaryPlayer.PlayerID, Playlist);
        }
        // End:0x2C8
        else
        {
            return Outer.Skill.GetMMR(Rating.Mu, Rating.Sigma);
        }
    }
    //return ReturnValue;    
}

protected function HandlePartyError(string Error)
{
    OnPartyError(class'Errors_X'.default.UnknownError.CreateError(Error));
    //return;    
}

protected function OnPartyError(DumpUnreferencedAnims Error)
{
    LogInternal((("OnPartyError Error=" $ string(Error.Type)) @ "Message=") $ Error.Message, 'Party');
    SetProcessingStatus(0);
    EventPartyError(self, Error);
    //return;    
}

function BroadcastBugReport(string Reason)
{
    // End:0x6B
    if(IsPartyLeader())
    {
        MessageComponent.CreateMessage(class'PartyMessage_BugIt_X', self).SetReason(Reason).Broadcast();
    }
    //return;    
}

protected function HandlePartyBugReport(GetAPlayerController Component, class Message)
{
    local bool BugItMessage;

    BugItMessage = PartyMessage_BugIt_X(Message);
    class'BugReport_X'.static.StaticSubmitBugReport(BugItMessage.Reason $ "_PartyMember");
    //return;    
}

protected final function string GetPlayerRatingString(GetDefaultObject PlayerID, int Playlist)
{
    local @NULL Rating;

    Rating = Outer.Skill.GetPlayerRating(PlayerID, Playlist);
    return (("Mu=" $ string(Rating.Mu)) @ "Sigma=") $ string(Rating.Sigma);
    //return ReturnValue;    
}

simulated function PrintDebugInfo(GetAPlayerController Drawer)
{
    local int Idx;
    local @NULL LobbyInfo, Rating;
    local GetAPlayerController GroupRating;
    local GetDefaultObject Playlist;
    local bool bPrintedUnrankedSkill;

    super(Object).PrintDebugInfo(Drawer);
    // End:0xC1
    foreach OnlineLobbyInterfaceImpl(bool(OnlineSub.LobbyInterface)).ActiveLobbies(LobbyInfo, Idx)
    {
        Drawer.PrintArrayProperty(string('ActiveLobbies'), Idx, UniqueLobbyIdToString(LobbyInfo.LobbyUID));        
    }    
    Idx = 0;
    J0xCD:
    // End:0x156 [Loop If]
    if(Idx < PartyMembers.Length)
    {
        Drawer.PrintArrayProperty(string('PartyMembers'), Idx, UniqueNetIdToString(PartyMembers[Idx].MemberId));
        ++ Idx;
        // [Loop Continue]
        goto J0xCD;
    }
    // End:0x59B
    foreach Outer.Playlists.DownloadedPlaylists(Playlist,)
    {
        // End:0x59A
        if(Playlist.bStandard)
        {
            // End:0x59A
            if(!bPrintedUnrankedSkill || Playlist.bRanked)
            {
                bPrintedUnrankedSkill = bPrintedUnrankedSkill || !Playlist.bRanked;
                // End:0x38C
                if(UseGroupMMR())
                {
                    GroupRating = Outer.SkillGroups.GetGroupSkillRating(GetPartyMemberIDs(), Playlist.PlaylistId);
                    Drawer.PrintArrayProperty("Group Skill", Playlist.PlaylistId, (((((("Mu=" $ string(GroupRating.Mu)) @ "Sigma=") $ string(GroupRating.Sigma)) @ "Tier=") $ string(GroupRating.Tier)) @ "Division=") $ string(GroupRating.Division));
                    // End:0x59A
                    continue;
                }
                Idx = 0;
                J0x397:
                // End:0x59A [Loop If]
                if(Idx < PartyMembers.Length)
                {
                    Rating = Outer.Skill.GetPlayerRating(PartyMembers[Idx].MemberId, Playlist.PlaylistId);
                    Drawer.PrintArrayProperty("PartySkills", Idx, ((((((((UniqueNetIdToString(PartyMembers[Idx].MemberId) @ string(((Playlist.bRanked) ? Playlist.Name : 'Unranked'))) @ "Mu=") $ string(Rating.Mu)) @ "Sigma=") $ string(Rating.Sigma)) @ "Tier=") $ string(Rating.Tier)) @ "Division=") $ string(Rating.Division));
                    ++ Idx;
                    // [Loop Continue]
                    goto J0x397;
                }
            }
        }        
    }    
    //return;    
}

private final function SetProcessingStatus(byte Status)
{
    // End:0x42
    if(Status != ProcessingStatus)
    {
        ProcessingStatus = Status;
        EventProcessingStatusChanged(self);
    }
    //return;    
}

final function bool IsProcessing()
{
    return ProcessingStatus != 0;
    //return ReturnValue;    
}

protected function HandleSessionCreated()
{
    BroadcastAllLocalPlayers();
    //return;    
}

final function array GetPartyMemberIDs()
{
    local int MemberIdx;
    local array<coerce out GetAPlayerController> MemberIds;

    MemberIdx = 0;
    J0x0B:
    // End:0x64 [Loop If]
    if(MemberIdx < PartyMembers.Length)
    {
        MemberIds.AddItem(PartyMembers[MemberIdx].MemberId);
        ++ MemberIdx;
        // [Loop Continue]
        goto J0x0B;
    }
    return MemberIds;
    //return ReturnValue;    
}

function SetPlayersTrading(GetAPlayerController InMember1Id, GetAPlayerController InMember2Id, bool bTrading)
{
    local int MemberIdx;
    local GetDefaultObject CancelId;
    local @NULL CancelGuid;

    MemberIdx = 0;
    J0x0B:
    // End:0x1EA [Loop If]
    if(MemberIdx < PartyMembers.Length)
    {
        // End:0x101
        if(PartyMembers[MemberIdx].MemberId == InMember1Id)
        {
            // End:0x9E
            if(bTrading)
            {
                PartyMembers[MemberIdx].TradingMemberId = InMember2Id;
            }
            // End:0xFE
            else
            {
                PartyMembers[MemberIdx].TradingMemberId = CancelId;
                PartyMembers[MemberIdx].TradeId = CancelGuid;
            }
        }
        // End:0x1DC
        else
        {
            // End:0x1DC
            if(PartyMembers[MemberIdx].MemberId == InMember2Id)
            {
                // End:0x17C
                if(bTrading)
                {
                    PartyMembers[MemberIdx].TradingMemberId = InMember1Id;
                }
                // End:0x1DC
                else
                {
                    PartyMembers[MemberIdx].TradingMemberId = CancelId;
                    PartyMembers[MemberIdx].TradeId = CancelGuid;
                }
            }
        }
        ++ MemberIdx;
        // [Loop Continue]
        goto J0x0B;
    }
    //return;    
}

function bool IsPlayerTrading(@NULL InMemberId)
{
    local int MemberIdx;

    MemberIdx = 0;
    J0x0B:
    // End:0xB9 [Loop If]
    if(MemberIdx < PartyMembers.Length)
    {
        // End:0xAB
        if(PartyMembers[MemberIdx].MemberId == InMemberId && NotEqual_QWordQWord(PartyMembers[MemberIdx].TradingMemberId.Uid, @UnknownCastToken(0x62), 0))
        {
            return true;
        }
        ++ MemberIdx;
        // [Loop Continue]
        goto J0x0B;
    }
    //return ReturnValue;    
}

function InvitePlayerToTrade(@NULL InMemberId)
{
    local @NULL PartyMemberID;
    local int PartyMemberIndex;

    // End:0x134
    if(IsInParty())
    {
        PartyMemberID = GetLocalMemberId();
        PartyMemberIndex = PartyMembers.Find('MemberId', PartyMemberID);
        // End:0x134
        if(PartyMemberIndex > -1)
        {
            LogInternal((((string(GetFuncName()) @ "PartyMemberID:'") $ UniqueNetIdToString(PartyMemberID)) $ "'") @ UniqueNetIdToString(InMemberId), 'Party');
            MessageComponent.CreateMessage(class'PartyMessage_InviteToTrade_X', self).SetMemberId(PartyMemberID).SetInviteMemberId(InMemberId).Broadcast();
        }
    }
    //return;    
}

protected function HandleInviteToTradeMessage(GetAPlayerController Component, class Message)
{
    local float InviteToTradeMessage;

    InviteToTradeMessage = PartyMessage_InviteToTrade_X(Message);
    // End:0x52
    if(GetLocalMemberId() != InviteToTradeMessage.InviteMemberId)
    {
        return;
    }
    // End:0x6B
    if(IsPlayerTrading(GetLocalMemberId()))
    {
        return;
    }
    SetPlayersTrading(InviteToTradeMessage.MemberId, InviteToTradeMessage.InviteMemberId, true);
    EventInviteToTrade(self);
    //return;    
}

function string GetTradingPlayerName()
{
    local @NULL PartyMemberID;
    local int PartyMemberIndex;

    // End:0xDD
    if(IsInParty())
    {
        PartyMemberID = GetLocalMemberId();
        PartyMemberIndex = PartyMembers.Find('MemberId', PartyMemberID);
        // End:0xDD
        if(PartyMemberIndex > -1)
        {
            PartyMemberIndex = PartyMembers.Find('MemberId', PartyMembers[PartyMemberIndex].TradingMemberId);
            // End:0xDD
            if(PartyMemberIndex > -1)
            {
                return PartyMembers[PartyMemberIndex].MemberName;
            }
        }
    }
    return "ERROR";
    //return ReturnValue;    
}

function AcceptInviteToTrade(bool bAccepted)
{
    local @NULL PartyMemberID;
    local int PartyMemberIndex;
    local @NULL NewGuid;

    // End:0x2FB
    if(IsInParty())
    {
        PartyMemberID = GetLocalMemberId();
        PartyMemberIndex = PartyMembers.Find('MemberId', PartyMemberID);
        // End:0x2FB
        if(PartyMemberIndex > -1)
        {
            // End:0x7E
            if(bAccepted)
            {
                NewGuid = CreateGuid();
            }
            LogInternal((((string(GetFuncName()) @ "PartyMemberID:'") $ UniqueNetIdToString(PartyMemberID)) $ "'") @ UniqueNetIdToString(PartyMembers[PartyMemberIndex].TradingMemberId), 'Party');
            MessageComponent.CreateMessage(class'PartyMessage_AcceptInviteToTrade_X', self).SetMemberId(PartyMemberID).SetInviteMemberId(PartyMembers[PartyMemberIndex].TradingMemberId).SetInviteAccepted(bAccepted).SetTradeId(NewGuid).Broadcast();
            // End:0x2B6
            if(bAccepted)
            {
                PartyMembers[PartyMemberIndex].TradeId = NewGuid;
                PartyMemberIndex = PartyMembers.Find('MemberId', PartyMembers[PartyMemberIndex].TradingMemberId);
                // End:0x294
                if(PartyMemberIndex > -1)
                {
                    PartyMembers[PartyMemberIndex].TradeId = NewGuid;
                }
                EventAcceptedInviteToTrade(self);
                SetPartyMessageHandlerTradeProductUpdate(true);
            }
            // End:0x2FB
            else
            {
                SetPlayersTrading(PartyMemberID, PartyMembers[PartyMemberIndex].TradingMemberId, false);
                SetPartyMessageHandlerTradeProductUpdate(false);
            }
        }
    }
    //return;    
}

protected function HandleAcceptInviteToTrade(GetAPlayerController Component, class Message)
{
    local GetAPlayerController AcceptInviteToTradeMessage;
    local @NULL PartyMemberID;
    local int PartyMemberIndex;

    AcceptInviteToTradeMessage = PartyMessage_AcceptInviteToTrade_X(Message);
    SetPlayersTrading(AcceptInviteToTradeMessage.MemberId, AcceptInviteToTradeMessage.InviteMemberId, AcceptInviteToTradeMessage.bInviteAccepted);
    // End:0x281
    if(AcceptInviteToTradeMessage.MemberId == GetLocalMemberId() || AcceptInviteToTradeMessage.InviteMemberId == GetLocalMemberId())
    {
        PartyMemberID = GetLocalMemberId();
        PartyMemberIndex = PartyMembers.Find('MemberId', PartyMemberID);
        // End:0x21E
        if(PartyMemberIndex > -1)
        {
            PartyMembers[PartyMemberIndex].TradeId = AcceptInviteToTradeMessage.TradeId;
            PartyMemberIndex = PartyMembers.Find('MemberId', PartyMembers[PartyMemberIndex].TradingMemberId);
            // End:0x21E
            if(PartyMemberIndex > -1)
            {
                PartyMembers[PartyMemberIndex].TradeId = AcceptInviteToTradeMessage.TradeId;
            }
        }
        // End:0x262
        if(AcceptInviteToTradeMessage.bInviteAccepted)
        {
            EventAcceptedInviteToTrade(self);
            SetPartyMessageHandlerTradeProductUpdate(true);
        }
        // End:0x281
        else
        {
            EventCloseInviteToTrade(self);
            SetPartyMessageHandlerTradeProductUpdate(false);
        }
    }
    //return;    
}

protected function SetPartyMessageHandlerTradeProductUpdate(bool bAddHandler)
{
    //return;    
}

function ReadyToTrade(bool bReadyToTrade)
{
    local @NULL PartyMemberID;
    local int PartyMemberIndex;

    // End:0x266
    if(IsInParty())
    {
        PartyMemberID = GetLocalMemberId();
        PartyMemberIndex = PartyMembers.Find('MemberId', PartyMemberID);
        // End:0x266
        if(PartyMemberIndex > -1)
        {
            LogInternal((((string(GetFuncName()) @ "PartyMemberID:'") $ UniqueNetIdToString(PartyMemberID)) $ "'") @ UniqueNetIdToString(PartyMembers[PartyMemberIndex].TradingMemberId), 'Party');
            MessageComponent.CreateMessage(class'PartyMessage_ReadyToTrade_X', self).SetMemberId(PartyMemberID).SetTradingMemberId(PartyMembers[PartyMemberIndex].TradingMemberId).SetReadyToTrade(bReadyToTrade).Broadcast();
            PartyMembers[PartyMemberIndex].bReadyToTrade = bReadyToTrade;
            PartyMemberIndex = PartyMembers.Find('MemberId', PartyMembers[PartyMemberIndex].TradingMemberId);
            // End:0x266
            if(PartyMemberIndex > -1)
            {
                // End:0x266
                if(bReadyToTrade && PartyMembers[PartyMemberIndex].bReadyToTrade)
                {
                    EventSendTradeToBackEnd(self);
                }
            }
        }
    }
    //return;    
}

protected function HandleReadyToTrade(GetAPlayerController Component, class Message)
{
    local @NULL ReadyToTradeMessage, PartyMemberID;
    local int PartyMemberIndex;
    local bool bLocalReadyToTrade;

    ReadyToTradeMessage = PartyMessage_ReadyToTrade_X(Message);
    // End:0x209
    if(IsInParty())
    {
        PartyMemberID = GetLocalMemberId();
        PartyMemberIndex = PartyMembers.Find('MemberId', PartyMemberID);
        // End:0x209
        if(PartyMemberIndex > -1)
        {
            // End:0x209
            if(PartyMembers[PartyMemberIndex].TradingMemberId == ReadyToTradeMessage.MemberId)
            {
                bLocalReadyToTrade = PartyMembers[PartyMemberIndex].bReadyToTrade;
                PartyMemberIndex = PartyMembers.Find('MemberId', ReadyToTradeMessage.MemberId);
                // End:0x209
                if(PartyMemberIndex > -1)
                {
                    PartyMembers[PartyMemberIndex].bReadyToTrade = ReadyToTradeMessage.bReadyToTrade;
                    // End:0x1F5
                    if(PartyMembers[PartyMemberIndex].bReadyToTrade)
                    {
                        // End:0x1DE
                        if(bLocalReadyToTrade)
                        {
                            EventSendTradeToBackEnd(self);
                        }
                        EventReadyToTrade(self);
                    }
                    // End:0x209
                    else
                    {
                        EventNotReadyToTrade(self);
                    }
                }
            }
        }
    }
    //return;    
}
**/