/*******************************************************************************
 * LocalPlayer_TA generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib Â© 2009-2015 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class LocalPlayer_TA extends LocalPlayer_X
    transient
    native;

var privatewrite SaveGameManager_TA SaveManager;
var privatewrite transient Profile_TA Profile;
var export editinline ProductLoader_TA ProductLoader;
// /var transient GFxData_LocalPlayer_TA.ESplitScreenPosition SplitScreenPosition;
/**
var delegate<EventProfileSet> __EventProfileSet__Delegate;
var delegate<EventSplitScreenPositionChanged> __EventSplitScreenPositionChanged__Delegate;

delegate EventProfileSet(LocalPlayer_TA LocalPlayer)
{
    //return;    
}

delegate EventSplitScreenPositionChanged(LocalPlayer_TA LocalPlayer)
{
    //return;    
}
event string GetNickname()
{
    // End:0x4A
    if(OnlinePlayer.LoginStatus != 0)
    {
        return OnlinePlayer.GetRemoteName();
    }
    // End:0x78
    if(Profile != none)
    {
        return Profile.ProfileName;
    }
    return "";
    //return ReturnValue;    
}

event UniqueNetId GetUniqueNetId()
{
    return OnlinePlayer.PlayerID;
    //return ReturnValue;    
}

function OnCreated()
{
    // End:0x3F
    if(class'WorldInfo'.static.IsConsoleBuild(11))
    {
        SaveManager = new class'SaveGameManager_TA';
    }
    // End:0x7F
    else
    {
        SaveManager = class'EngineShare_TA'.static.GetInstance().GetSystemSave();
    }
    super.OnCreated();
    SaveManager.NotifyWhenLoaded(HandleSaveDataLoaded);
    // End:0x11C
    if(SaveManager.Player == none)
    {
        SaveManager.Init(self);
        SaveManager.Load();
    }
    HandleSplitScreenTypeChanged(GameViewportClient_TA(ViewportClient));
    UnknownLocal_468135449
    @NULL
    // DebugMode:True
    NativeFunctionToken-VirtualFunctionToken(System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.
Parameter name: index
   at System.ThrowHelper.ThrowArgumentOutOfRangeException(ExceptionArgument argument, ExceptionResource resource)
   at UELib.Core.UStruct.UByteCodeDecompiler.VirtualFunctionToken.Decompile() in E:\Development\Unreal-Library\src\Core\Tokens\FunctionTokens.cs:line 243
   at UELib.Core.UStruct.UByteCodeDecompiler.FunctionToken.PrecedenceToken(Token t) in E:\Development\Unreal-Library\src\Core\Tokens\FunctionTokens.cs:line 66
   at UELib.Core.UStruct.UByteCodeDecompiler.FunctionToken.DecompileOperator(String operatorName) in E:\Development\Unreal-Library\src\Core\Tokens\FunctionTokens.cs:line 78
   at UELib.Core.UStruct.UByteCodeDecompiler.NativeFunctionToken.Decompile() in E:\Development\Unreal-Library\src\Core\Tokens\FunctionTokens.cs:line 338
   at UELib.Core.UStruct.UByteCodeDecompiler.FunctionToken.PrecedenceToken(Token t) in E:\Development\Unreal-Library\src\Core\Tokens\FunctionTokens.cs:line 66
   at UELib.Core.UStruct.UByteCodeDecompiler.FunctionToken.DecompileOperator(String operatorName) in E:\Development\Unreal-Library\src\Core\Tokens\FunctionTokens.cs:line 78
   at UELib.Core.UStruct.UByteCodeDecompiler.NativeFunctionToken.Decompile() in E:\Development\Unreal-Library\src\Core\Tokens\FunctionTokens.cs:line 338
   at UELib.Core.UStruct.UByteCodeDecompiler.Decompile() in E:\Development\Unreal-Library\src\ByteCodeDecompiler.cs:line 1351);
    @NULL    
    @NULL
    default.@NULL
    @NULL
}

private final function HandleSaveDataLoaded(SaveGameManager_TA Manager, SaveData_TA SaveData, Error_X Error)
{
    // End:0xB5
    if(Error == none)
    {
        // End:0xAB
        if(OnlinePlayer.IsPrimaryPlayer())
        {
            // End:0xAB
            if(class'OnlineGame_X'.static.GetInstance() != none)
            {
                class'OnlineGame_X'.static.GetInstance().SetVoiceVolume(SaveData.VoiceVolume);
            }
        }
        SetDefaultProfile();
    }
    //return;    
}

function SetDefaultProfile()
{
    SetProfile(SaveManager.SaveData.GetProfileForPlayer(self));
    //return;    
}

function SetProfile(Profile_TA NewProfile)
{
    // End:0x246
    if(NewProfile != Profile)
    {
        // End:0x63
        if(Profile != none)
        {
            UnknownLocal_201398553
            true
            @NULL
            0
            @NULL
            @NULL
            1
            @NULL
            1
            @NULL
            @NULL
        }
        @NULL
        @NULL
        @NULL
        "SetProfile Profile=" $ string(Profile);
        "ProfileName="
        )
        Profile.ProfileName
        )
        'Signin'
        true
        )
        // End:0x10C
        if(Actor != none)
        {
            PlayerControllerBase_TA(Actor).InitProfileSettings();
        }
        // End:0x1BE
        if(OnlinePlayer.IsPrimaryPlayer())
        {
            // End:0x1BE
            if(class'OnlineGame_X'.static.GetInstance() != none)
            {
                class'OnlineGame_X'.static.GetInstance().Matchmaking.SetDisableCrossPlay(NewProfile.bDisableCrossPlay);
            }
        }
        // End:0x232
        if(Profile != none)
        {
            UnknownLocal_201398553
            true
            @NULL
            0
            @NULL
            @NULL
            1
            @NULL
            1
            @NULL
            @NULL
            @NULL
            @NULL
            Profile.Loadout
        }
        )
    }
    EventProfileSet(self);
}

final function OnlineGameAnalytics_TA GetAnalytics()
{
    return OnlineGameAnalytics_TA(class'OnlineGame_X'.static.GetInstance().Analytics);
    //return ReturnValue;    
}

protected function HandleLoadoutChanged(Loadout_TA InLoadout)
{
    ProductLoader.LoadLoadout(InLoadout.GetData());
    //return;    
}

function HandleSplitScreenTypeChanged(GameViewportClient_TA InViewportClient)
{
    SplitScreenPosition = GetSplitScreenPosition(InViewportClient);
    EventSplitScreenPositionChanged(self);
    //return;    
}

protected function GFxData_LocalPlayer_TA.ESplitScreenPosition GetSplitScreenPosition(GameViewportClient InViewportClient)
{
    local Vector ScreenCenter;

    ScreenCenter.X = Origin.X + (Size.X * 0.50);
    ScreenCenter.Y = Origin.Y + (Size.Y * 0.50);
    switch(InViewportClient.ActiveSplitscreenType)
    {
        // End:0xEC
        case 0:
            return 0;
        // End:0x11E
        case 1:
            return ((ScreenCenter.Y < 0.50) ? 3 : 4);
        // End:0x150
        case 2:
            return ((ScreenCenter.X < 0.50) ? 1 : 2);
        // End:0x1AE
        case 3:
            // End:0x181
            if(ScreenCenter.Y < 0.50)
            {
                return 3;
            }
            // End:0x1AE
            else
            {
                return ((ScreenCenter.X < 0.50) ? 7 : 8);
        }
        // End:0x20C
        case 4:
            // End:0x1DF
            if(ScreenCenter.Y > 0.50)
            {
                return 4;
            }
            // End:0x20C
            else
            {
                return ((ScreenCenter.X < 0.50) ? 5 : 6);
        }
        // End:0x26A
        case 5:
            // End:0x23D
            if(ScreenCenter.X < 0.50)
            {
                return 1;
            }
            // End:0x26A
            else
            {
                return ((ScreenCenter.Y < 0.50) ? 6 : 8);
        }
        // End:0x2C8
        case 6:
            // End:0x29B
            if(ScreenCenter.X > 0.50)
            {
                return 1;
            }
            // End:0x2C8
            else
            {
                return ((ScreenCenter.Y < 0.50) ? 5 : 7);
        }
        // End:0x350
        case 7:
            // End:0x323
            if(ScreenCenter.X < 0.50)
            {
                return ((ScreenCenter.Y < 0.50) ? 5 : 7);
            }
            // End:0x350
            else
            {
                return ((ScreenCenter.Y < 0.50) ? 6 : 8);
        }
        // End:0xFFFF
        default:
            WarnInternal("Unsupported splitscreen position" @ string(InViewportClient.ActiveSplitscreenType));
            return 0;
    }
    //return ReturnValue;    
}

simulated function PrintDebugInfo(DebugDrawer Drawer)
{
    super(Object).PrintDebugInfo(Drawer);
    Drawer.DebugObject("SaveData", SaveManager.SaveData);
    //return;    
}
**/
