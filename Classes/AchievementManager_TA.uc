/*******************************************************************************
 * AchievementManager_TA generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib Â© 2009-2015 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class AchievementManager_TA extends TickableStateObject_X;

enum EAchievementType
{
    AT_Game,
    AT_EXP0,
    AT_DLC0,
    AT_MAX
};

enum EAchievementGame
{
    AG_Virtuoso,
    AG_Stocked,
    AG_FarFarAway,
    AG_SuperVictorious,
    AG_Champion,
    AG_TheStreak,
    AG_HelensPride,
    AG_BattleCarCollector,
    AG_DropsintheBucket,
    AG_Rocketeer,
    AG_GreaseMonkey,
    AG_PitchVeteran,
    AG_RidersBlock,
    AG_BreakShot,
    AG_Turbocharger,
    AG_DrillSergeant,
    AG_MinutetoWinit,
    AG_SpeedDemon,
    AG_PickMeUp,
    AG_WallCrawler,
    AG_TeamPlayer,
    AG_SARPBCForever,
    AG_FeatherinYourRecap,
    AG_Winner,
    AG_CleanSheet,
    AG_TripleThreat,
    AG_DoubleUp,
    AG_SinglesClub,
    AG_PerfectStart,
    AG_StillAShowOff,
    AG_KnowTheDrill,
    AG_Traveler,
    AG_Tinkerer,
    AG_FirstTimer,
    AG_BarrasBravas,
    AG_Friendly,
    AG_MAX
};

enum EAchievementEXP0
{
    AEXP0_SkyHigh,
    AEXP0_AllFours,
    AEXP0_Gladiator,
    AEXP0_MAX
};

enum EAchievementDLC0
{
    ADLC0_WinningIsWinning,
    ADLC0_AnInchAnd62Miles,
    ADLC0_RideOrDie,
    ADLC0_DontLookBack,
    ADLC0_FamilyNotFriends,
    ADLC0_DriftKing,
    ADLC0_MAX
};

struct AchievementInfo
{
    var bool bUnlocked;
};

/**
var transient PlayerControllerBase_TA PC;
var array<name> DLC0Cars;
var array<name> ClassicCars;
var array<name> RequiredDontLookBackProducts;
var array<name> RequiredRideOrDieDecalProducts;
var array<name> RequiredRideOrDiePaintProducts;
var array<name> RequiredAnInchAnd62MilesProducts;
var array<string> RequiredLevelsToPlay;
var float MaxBoostTime;
var float MaxTimeOnWall;
var int MaxItemsDropped;
var float MaxDriveDistanceKM;
var int MaxRocketBoostFills;
var int TotalDLC0BoostTime;
var int TotalDLC0WheelDriveDistanceKM;
var int CristianoProductID;
var int SpinnerProductID;
var bool bBoostWasFull;
var bool bCheckMinuteToWinIt;
var bool bHandbrakePressed;
var Vector LastCarLocation;
var int RocketBoostFills;
var int GoalsScoredInCurrentGame;
var int LastKMDrivenInt;
var transient float LastKMDriven;
var Vector HandbrakeStartDir;
var Vector HandbrakeStartLocation;
var float MaxHandbrakeRadius;
var float MinHandbrakeDotAngleForComplete;
var AchievementSave_TA SaveData;
var transient GameEvent_TA LastGameEvent;
var transient PRI_TA LastPRI;
var transient GameInfo_Replay_TA LastGame;
var delegate<EventAchievementUnlocked> __EventAchievementUnlocked__Delegate;
var delegate<EventDrivenDistance> __EventDrivenDistance__Delegate;
var delegate<EventGoalAmountScored> __EventGoalAmountScored__Delegate;
var delegate<EventShotAmountBlocked> __EventShotAmountBlocked__Delegate;
var delegate<EventGameEventAmountWon> __EventGameEventAmountWon__Delegate;
var delegate<EventNewMVPScore> __EventNewMVPScore__Delegate;
var delegate<EventChampionshipAmountChanged> __EventChampionshipAmountChanged__Delegate;
var delegate<EventRegularSeasonAmountChanged> __EventRegularSeasonAmountChanged__Delegate;
var delegate<EventRandomItemAmountDropped> __EventRandomItemAmountDropped__Delegate;

delegate EventAchievementUnlocked(AchievementManager_TA Manager, int AchievementId, AchievementManager_TA.EAchievementType AchievementType)
{
    //return;    
}

delegate EventDrivenDistance(AchievementManager_TA Manager, float Distance)
{
    //return;    
}

delegate EventGoalAmountScored(AchievementManager_TA Manager, int Score)
{
    //return;    
}

delegate EventShotAmountBlocked(AchievementManager_TA Manager, int bLocked)
{
    //return;    
}

delegate EventGameEventAmountWon(AchievementManager_TA Manager, int GamesWon)
{
    //return;    
}

delegate EventNewMVPScore(AchievementManager_TA Manager, int Score)
{
    //return;    
}

delegate EventChampionshipAmountChanged(AchievementManager_TA Manager, int Wins)
{
    //return;    
}

delegate EventRegularSeasonAmountChanged(AchievementManager_TA Manager, int Amount)
{
    //return;    
}

delegate EventRandomItemAmountDropped(AchievementManager_TA Manager, int Amount)
{
    //return;    
}

private final function UnlockAchievement(int AchievementId, optional AchievementManager_TA.EAchievementType AchievementType)
{
    local OnlinePlayer_X OnlinePlayer;

    AchievementType = 0;
    // End:0x1FF
    if(!IsUnlocked(AchievementId, AchievementType))
    {
        switch(AchievementType)
        {
            // End:0x80
            case 0:
                SaveData.Achievements[AchievementId].bUnlocked = true;
                // End:0x10F
                break;
            // End:0xC6
            case 1:
                SaveData.Achievements_EXP0[AchievementId].bUnlocked = true;
                // End:0x10F
                break;
            // End:0x10C
            case 2:
                SaveData.Achievements_DLC0[AchievementId].bUnlocked = true;
                // End:0x10F
                break;
            // End:0xFFFF
            default:
                OnlinePlayer = LocalPlayer_X(PC.Player).OnlinePlayer;
                OnlinePlayer.UnlockAchievement(byte(OnlinePlayer.LocalPlayerNum), GetActualAchievementID(AchievementId, AchievementType));
                Save();
                EventAchievementUnlocked(self, AchievementId, AchievementType);
                // End:0x1FF
                if(AchievementType == 0)
                {
                    CheckUnlockedAllGameAchievements();
                }
            }
            //return;            
}

private final function bool IsUnlocked(int AchievementId, optional AchievementManager_TA.EAchievementType AchievementType)
{
    AchievementType = 0;
    switch(AchievementType)
    {
        // End:0x5B
        case 0:
            return SaveData.Achievements[AchievementId].bUnlocked;
        // End:0x9D
        case 1:
            return SaveData.Achievements_EXP0[AchievementId].bUnlocked;
        // End:0xDF
        case 2:
            return SaveData.Achievements_DLC0[AchievementId].bUnlocked;
        // End:0xFFFF
        default:
            LogInternal("----------------Error Achievement Type not found----------------" @ string(AchievementType));
            return false;
    }
    //return ReturnValue;    
}

private final function int GetActualAchievementID(int AchievementId, optional AchievementManager_TA.EAchievementType AchievementType)
{
    AchievementType = 0;
    switch(AchievementType)
    {
        // End:0x28
        case 0:
            return AchievementId;
        // End:0x3B
        case 1:
            return 36 + AchievementId;
        // End:0x52
        case 2:
            return (36 + 3) + AchievementId;
        // End:0xFFFF
        default:
            LogInternal("----------------Error Actual Achievement Type not found----------------" @ string(AchievementType));
            return -1;
    }
    //return ReturnValue;    
}

private final function IncrementStat(int AchievementId, int Progress)
{
    local OnlineSubsystem OnlineSub;
    local OnlineStatsWrite_TA PendingStatWrite;

    PendingStatWrite = new class'OnlineStatsWrite_TA';
    PendingStatWrite.SetIntStat(AchievementId, Progress);
    OnlineSub = class'GameEngine'.static.GetOnlineSubsystem();
    OnlineSub.StatsInterface.WriteOnlineStats('ProfileStats', PC.PlayerReplicationInfo.UniqueId, PendingStatWrite);
    OnlineSub.StatsInterface.FlushOnlineStats('ProfileStats');
    //return;    
}

function Init(PlayerControllerBase_TA InPC)
{
    // End:0x3A
    if(InPC.Player != none)
    {
        HandlePlayerReceived(InPC);
    }
    // End:0x62
    else
    {
        UnknownLocal_11599897
        @NULL
        // Failed to decompile this line:
      
        // Index was out of range. Must be non-negative and less than the size of the collection.
        Parameter name: index
        // Failed to format remaining nests!:System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.
Parameter name: index
   at System.ThrowHelper.ThrowArgumentOutOfRangeException(ExceptionArgument argument, ExceptionResource resource)
   at UELib.Core.UStruct.UByteCodeDecompiler.DecompileNests(Boolean outputAllRemainingNests) in E:\Development\Unreal-Library\src\ByteCodeDecompiler.cs:line 1575
   at UELib.Core.UStruct.UByteCodeDecompiler.Decompile() in E:\Development\Unreal-Library\src\ByteCodeDecompiler.cs:line 1503
        // 1 & Type:Else Position:98
}

protected function HandlePlayerReceived(PlayerController_X InPC)
{
    PC = PlayerControllerBase_TA(InPC);
    RocketBoostFills = 0;
    GoalsScoredInCurrentGame = 0;
    bCheckMinuteToWinIt = false;
    // End:0xBB
    if(PC.GetSaveData().AchievementData == none)
    {
        PC.GetSaveData().AchievementData = new class'AchievementSave_TA';
    }
    SaveData = PC.GetSaveData().AchievementData;
    UnknownLocal_9044249
    @NULL
    // Failed to decompile this line:
         // Failed to decompile this Function's code.
          at position 0 
 Message: Index was out of range. Must be non-negative and less than the size of the collection.
        Parameter name: index 

 StackTrace:    at System.ThrowHelper.ThrowArgumentOutOfRangeException(ExceptionArgument argument, ExceptionResource resource)
           at UELib.Core.UStruct.UByteCodeDecompiler.FormatTokens(Int32 beginIndex, Int32 endIndex) in E:\Development\Unreal-Library\src\ByteCodeDecompiler.cs:line 1544
           at UELib.Core.UStruct.UByteCodeDecompiler.Decompile() in E:\Development\Unreal-Library\src\ByteCodeDecompiler.cs:line 1492
}

private final function HandleReceivedPRI(PlayerController_X InPC)
{
    UpdatePRI(PRI_TA(InPC.PlayerReplicationInfo));
    //return;    
}

private final function UpdatePRI(PRI_TA PRI)
{
    // End:0x87
    if(LastPRI != none)
    {
        UnknownLocal_7995673
        @NULL
        none
        @NULL
        none
        @NULL
        @NULL
        @NULL
        @NULL
        -@NULL != @NULL != @NULL;
    }
    @NULL
    @NULL
    @NULL
    PRI
    none
    )
    UnknownLocal_11993113
    @NULL
    none
    @NULL
    none
    @NULL
    @NULL
    @NULL
    @NULL
    -@NULL != @NULL != @NULL;
    @NULL
    @NULL
    @NULL
    @NULL
    @NULL
    @NULL
    @NULL
    @NULL /= (none >>> @NULL);
}

private final function HandleGameEventChanged(PRI_TA PRI)
{
    local PRI_TA CurPRI;
    local GameEvent_Soccar_TA Soccar;
    local GameEvent_Season_TA Season;
    local GameEvent_TA NextGameEvent;

    // End:0x37
    if(PRI != none)
    {
        NextGameEvent = PRI.GameEvent;
    }
    // End:0x1A4
    if(LastGameEvent != none)
    {
        Soccar = GameEvent_Soccar_TA(LastGameEvent);
        // End:0x151
        if(Soccar != none)
        {
            UnknownLocal_12255257
            @NULL            
            @NULL            
            @NULL
            @NULL
            @NULL
            GameEvent_Tutorial_TA(LastGameEvent)
            none
            )
            UnknownLocal_12255257
            @NULL            
            @NULL            
            @NULL
            @NULL
            @NULL
            @NULL
            NativeFunctionToken-MetaCastToken(System.NullReferenceException: Object reference not set to an instance of an object.
   at UELib.Core.UStruct.UByteCodeDecompiler.MetaCastToken.Decompile() in E:\Development\Unreal-Library\src\Core\Tokens\CastTokens.cs:line 58
   at UELib.Core.UStruct.UByteCodeDecompiler.FunctionToken.PrecedenceToken(Token t) in E:\Development\Unreal-Library\src\Core\Tokens\FunctionTokens.cs:line 54
   at UELib.Core.UStruct.UByteCodeDecompiler.FunctionToken.DecompileOperator(String operatorName) in E:\Development\Unreal-Library\src\Core\Tokens\FunctionTokens.cs:line 78
   at UELib.Core.UStruct.UByteCodeDecompiler.NativeFunctionToken.Decompile() in E:\Development\Unreal-Library\src\Core\Tokens\FunctionTokens.cs:line 338
   at UELib.Core.UStruct.UByteCodeDecompiler.FunctionToken.DecompileParms() in E:\Development\Unreal-Library\src\Core\Tokens\FunctionTokens.cs:line 115
   at UELib.Core.UStruct.UByteCodeDecompiler.FunctionToken.DecompileCall(String functionName) in E:\Development\Unreal-Library\src\Core\Tokens\FunctionTokens.cs:line 105
   at UELib.Core.UStruct.UByteCodeDecompiler.NativeFunctionToken.Decompile() in E:\Development\Unreal-Library\src\Core\Tokens\FunctionTokens.cs:line 338
   at UELib.Core.UStruct.UByteCodeDecompiler.FunctionToken.DecompileParms() in E:\Development\Unreal-Library\src\Core\Tokens\FunctionTokens.cs:line 115
   at UELib.Core.UStruct.UByteCodeDecompiler.FunctionToken.DecompileCall(String functionName) in E:\Development\Unreal-Library\src\Core\Tokens\FunctionTokens.cs:line 105
   at UELib.Core.UStruct.UByteCodeDecompiler.NativeFunctionToken.Decompile() in E:\Development\Unreal-Library\src\Core\Tokens\FunctionTokens.cs:line 338
   at UELib.Core.UStruct.UByteCodeDecompiler.Decompile() in E:\Development\Unreal-Library\src\ByteCodeDecompiler.cs:line 1351)
        }
        NativeFunctionToken-MetaCastToken(System.NullReferenceException: Object reference not set to an instance of an object.
   at UELib.Core.UStruct.UByteCodeDecompiler.MetaCastToken.Decompile() in E:\Development\Unreal-Library\src\Core\Tokens\CastTokens.cs:line 58
   at UELib.Core.UStruct.UByteCodeDecompiler.FunctionToken.PrecedenceToken(Token t) in E:\Development\Unreal-Library\src\Core\Tokens\FunctionTokens.cs:line 54
   at UELib.Core.UStruct.UByteCodeDecompiler.FunctionToken.DecompileOperator(String operatorName) in E:\Development\Unreal-Library\src\Core\Tokens\FunctionTokens.cs:line 78
   at UELib.Core.UStruct.UByteCodeDecompiler.NativeFunctionToken.Decompile() in E:\Development\Unreal-Library\src\Core\Tokens\FunctionTokens.cs:line 338
   at UELib.Core.UStruct.UByteCodeDecompiler.Decompile() in E:\Development\Unreal-Library\src\ByteCodeDecompiler.cs:line 1351)
        MetaCastToken-MetaCastToken(System.NullReferenceException: Object reference not set to an instance of an object.
   at UELib.Core.UStruct.UByteCodeDecompiler.MetaCastToken.Decompile() in E:\Development\Unreal-Library\src\Core\Tokens\CastTokens.cs:line 58
   at UELib.Core.UStruct.UByteCodeDecompiler.Decompile() in E:\Development\Unreal-Library\src\ByteCodeDecompiler.cs:line 1351)
        @NULL
        @NULL
        self
        @NULL
        @NULL
        Season != none;
        UnknownLocal_12189721
        @NULL
        self
        @NULL
    }
    self
    @NULL
    @NULL
    @NULL
    NextGameEvent
    none
    )
    Soccar = GameEvent_Soccar_TA(NextGameEvent);
    // End:0x334
    if(Soccar != none)
    {
        UnknownLocal_12255257
        @NULL        
        @NULL        
        @NULL
        @NULL
        @NULL
        GameEvent_Tutorial_TA(Soccar)
        none
        )
        UnknownLocal_12255257
        @NULL        
        @NULL        
        @NULL
        @NULL
        @NULL
        @NULL

    }        
    Season = GameEvent_Season_TA(NextGameEvent);
    // End:0x387
    if(Season != none)
    {
    }
    UnknownLocal_12189721
    @NULL
    self
    @NULL
}

private final function HandlePawnChange(PlayerController_X InPC, Pawn OldPawn, Pawn NewPawn)
{
    local Car_TA Car;
    local int ProductID;

    Car = Car_TA(NewPawn);
    // End:0x2ED
    if(Car != none)
    {
        LastCarLocation = Car.Location;
        // End:0x2ED
        if(GameEvent_Tutorial_TA(Car.PRI.GameEvent) == none)
        {
            Car.CarComponents.AddListener(HandleCarAddComponent);
            // End:0x2ED
            if(!IsUnlocked(5, 2))
            {
                SpinnerProductID = -1;
                CristianoProductID = -1;
                // End:0x259
                foreach PC.GetProfile().Loadout.Products(ProductID,)
                {
                    // End:0x258
                    if(ProductID != 0)
                    {
                        // End:0x1E7
                        if(class'GameData_TA'.default.Products.Products[ProductID].Name == 'Wheel_SoccerBall')
                        {
                            CristianoProductID = ProductID;
                            // End:0x258
                            continue;
                        }
                        // End:0x258
                        if(class'GameData_TA'.default.Products.Products[ProductID].Name == 'Wheel_Spinner')
                        {
                            SpinnerProductID = ProductID;
                        }
                    }                    
                }                
                // End:0x2ED
                if(((CristianoProductID > -1) || SpinnerProductID > -1) && PC.PlayerInput != none)
                {
                    PC.PlayerInput.__OnReceivedNativeInputKey__Delegate = NotifyKeyInput;
                }
            }
        }
    }
    //return;    
}

private final function HandleCarAddComponent(Object O)
{
    // End:0x5B
    if(!IsUnlocked(17))
    {
        // End:0x5B
        if(CarComponent_Boost_TA(O) != none)
        {
            UnknownLocal_216346137
            @NULL
            @NULL                        
            //return;            
        }
    }
}

private final function HandleGameTimeUpdated(GameEvent_Soccar_TA GameEvent)
{
    local Team_TA PlayerTeam, OtherTeam;

    // End:0x155
    if(!IsUnlocked(16))
    {
        // End:0x155
        if(GameEvent.SecondsRemaining <= 60)
        {
            UnknownLocal_13107225
            @NULL            
            @NULL            
            @NULL
            @NULL
            @NULL
            @NULL
            @NULL
            -- @NULL;
           
            Parameter name: index
            // Failed to format remaining nests!:System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.
Parameter name: index
   at System.ThrowHelper.ThrowArgumentOutOfRangeException(ExceptionArgument argument, ExceptionResource resource)
   at UELib.Core.UStruct.UByteCodeDecompiler.DecompileNests(Boolean outputAllRemainingNests) in E:\Development\Unreal-Library\src\ByteCodeDecompiler.cs:line 1575
   at UELib.Core.UStruct.UByteCodeDecompiler.Decompile() in E:\Development\Unreal-Library\src\ByteCodeDecompiler.cs:line 1503
            // 4 & Type:If Position:341
}

private final function bool GameEventHasPlayers(GameEvent_TA GameEvent)
{
    local PRI_TA PRI;

    // End:0xC5
    foreach GameEvent.PRIs(PRI,)
    {
        // End:0xC4
        if(((PRI != none) && PRI != PC.PlayerReplicationInfo) && PC.PlayerReplicationInfo.Team != PRI.Team)
        {            
            return true;
        }        
    }    
    return false;
    //return ReturnValue;    
}

private final function HandleOvertimeUpdated(GameEvent_Soccar_TA GameEvent)
{
    bCheckMinuteToWinIt = false;
    //return;    
}

private final function HandleNewPlayerAdded(GameEvent_TA GameEvent, PRI_TA PRI)
{
    // End:0x8B
    if(!IsUnlocked(34))
    {
        // End:0x8B
        if(GameEvent != none)
        {
            // End:0x8B
            if(PC.WorldInfo.NetMode > NM_DedicatedServer)
            {
                // End:0x8B
                if(IsPlayingWithAFriend(GameEvent, PRI))
                {
                    UnlockAchievement(34);
                }
            }
        }
    }
    //return;    
}

private final function HandleMatchWinnerSet(GameEvent_Soccar_TA GameEvent)
{
    // End:0x5A
    if(((GameEvent_SoccarSplitscreen_TA(GameEvent) != none) || GameEvent_Season_TA(GameEvent) != none) && GameEvent.SecondsRemaining > 0)
    {
        return;
    }
    CheckMatchWinnerGameSize(GameEvent);
    // End:0x329
    if(GameEvent.MatchWinner == PC.PlayerReplicationInfo.Team)
    {
        // End:0x113
        if(GameEvent_Season_TA(GameEvent) != none)
        {
            // End:0x113
            if(GameEvent_Season_TA(GameEvent).IsFirstGameOfSeason())
            {
                UnlockAchievement(28);
            }
        }
        // End:0x1BB
        if(GameEvent.Teams[((GameEvent.MatchWinner.TeamIndex == 0) ? 1 : 0)].Score == 0)
        {
            // End:0x1BB
            if(!GameEvent.bForfeit)
            {
                UnlockAchievement(24);
            }
        }
        // End:0x1EB
        if(bCheckMinuteToWinIt)
        {
            // End:0x1EB
            if(GameEventHasPlayers(GameEvent))
            {
                UnlockAchievement(16);
            }
        }
        // End:0x329
        if(!IsUnlocked(2, 2))
        {
            // End:0x26B
            if(!SaveData.bRideOrDieDominusCompleted && ProductIsInLoadout('Body_MuscleCar'))
            {
                // End:0x268
                if(HasRideOrDieRequiredProducts())
                {
                    SaveData.bRideOrDieDominusCompleted = true;
                }
            }
            // End:0x2D5
            else
            {
                // End:0x2D5
                if(!SaveData.bRideOrDieTakumiCompleted && ProductIsInLoadout('Body_Import'))
                {
                    // End:0x2D5
                    if(HasRideOrDieRequiredProducts())
                    {
                        SaveData.bRideOrDieTakumiCompleted = true;
                    }
                }
            }
            // End:0x329
            if(SaveData.bRideOrDieDominusCompleted && SaveData.bRideOrDieTakumiCompleted)
            {
                UnlockAchievement(2, 2);
            }
        }
    }
    IncrementGames(GameEvent);
    UpdateBotTeamsPlayed(GameEvent);
    //return;    
}

private final function CheckMatchWinnerGameSize(GameEvent_Soccar_TA GameEvent)
{
    // End:0xFA
    if(!GameEvent.bUnfairTeams && GameEvent.MatchWinner == PC.PlayerReplicationInfo.Team)
    {
        switch(GameEvent.MaxTeamSize)
        {
            // End:0xB8
            case 1:
                UnlockAchievement(27);
                // End:0xFA
                break;
            // End:0xCD
            case 2:
                UnlockAchievement(26);
                // End:0xFA
                break;
            // End:0xE2
            case 3:
                UnlockAchievement(25);
                // End:0xFA
                break;
            // End:0xF7
            case 4:
                UnlockAchievement(1, 1);
                // End:0xFA
                break;
            // End:0xFFFF
            default:
            }
            //return;            
}

private final function IncrementGames(GameEvent_Soccar_TA GameEvent)
{
    // End:0x2DE
    if(GameEvent.MatchWinner == PC.PlayerReplicationInfo.Team)
    {
        // End:0x277
        if(((!IsUnlocked(23) || !IsUnlocked(11)) || !IsUnlocked(3)) || SaveData.CheckGameEventsWon.Length > 0)
        {
            ++ SaveData.GameEventsWon;
            // End:0x148
            if(!IsUnlocked(23))
            {
                // End:0x11E
                if(SaveData.GameEventsWon >= 5)
                {
                    UnlockAchievement(23);
                }
                // End:0x148
                else
                {
                    IncrementStat(23, SaveData.GameEventsWon);
                }
            }
            // End:0x1B9
            if(!IsUnlocked(3))
            {
                // End:0x18F
                if(SaveData.GameEventsWon >= 30)
                {
                    UnlockAchievement(3);
                }
                // End:0x1B9
                else
                {
                    IncrementStat(3, SaveData.GameEventsWon);
                }
            }
            // End:0x277
            if(SaveData.CheckGameEventsWon.Length > 0)
            {
                // End:0x277
                if(SaveData.GameEventsWon >= SaveData.CheckGameEventsWon[0])
                {
                    EventGameEventAmountWon(self, SaveData.CheckGameEventsWon[0]);
                    SaveData.CheckGameEventsWon.Remove(0, 1);
                }
            }
        }
        // End:0x2DB
        if(!IsUnlocked(5))
        {
            ++ SaveData.GamesWonInARow;
            // End:0x2DB
            if(SaveData.GamesWonInARow >= 10)
            {
                UnlockAchievement(5);
            }
        }
    }
    // End:0x310
    else
    {
        // End:0x310
        if(!IsUnlocked(5))
        {
            SaveData.GamesWonInARow = 0;
        }
    }
    //return;    
}

private final function UpdateBotTeamsPlayed(GameEvent_Soccar_TA GameEvent)
{
    // End:0xD8
    if(GameEvent_Season_TA(GameEvent) != none)
    {
        AddToStringList(SaveData.BotTeamsPlayed, PC.GetProfile().GetLatestSeason().Teams[GameEvent_Season_TA(GameEvent).BotMatchTeam].Name);
        CheckBotTeamsPlayed(GameEvent);
    }
    //return;    
}

private final function CheckBotTeamsPlayed(GameEvent_Soccar_TA GameEvent)
{
    // End:0x7F
    if(SaveData.BotTeamsPlayed.Length == (PC.GetProfile().GetLatestSeason().Teams.Length - 1))
    {
        UnlockAchievement(20);
    }
    //return;    
}

private final function HandleMatchEnded(GameEvent_Soccar_TA GameEvent)
{
    // End:0x25
    if(GameEvent_SoccarSplitscreen_TA(GameEvent) != none)
    {
        UnlockAchievement(35);
    }
    // End:0x17C
    if(GameEvent_Season_TA(GameEvent) != none)
    {
        // End:0xD1
        if(GameEvent_Season_TA(GameEvent).IsLastRegularGameOfSeason())
        {
            UnlockAchievement(9);
            ++ SaveData.RegularSeasonsCompleted;
            EventRegularSeasonAmountChanged(self, SaveData.RegularSeasonsCompleted);
            Save();
        }
        // End:0x17C
        if(!IsUnlocked(0, 2))
        {
            // End:0x12F
            if(GameEvent_Season_TA(GameEvent).IsFirstGameOfSeason())
            {
                SaveData.WinningIsWinningPlayedWithDLC0Cars.Length = 0;
            }
            SaveData.WinningIsWinningPlayedWithDLC0Cars.AddItem(ProductIsInLoadout('Body_MuscleCar') || ProductIsInLoadout('Body_Import'));
        }
    }
    // End:0x20D
    if(!IsUnlocked(11))
    {
        ++ SaveData.GameEventsPlayed;
        // End:0x1E3
        if(SaveData.GameEventsPlayed >= 20)
        {
            UnlockAchievement(11);
        }
        // End:0x20D
        else
        {
            IncrementStat(11, SaveData.GameEventsPlayed);
        }
    }
    UpdateLevelsPlayed();
    UpdateTrainingModesPlayed(GameEvent);
    UpdateCarsPlayed();
    CheckUnlockedAllGameAchievements();
    // End:0x2A1
    if(GameEvent.SecondsRemaining <= 0)
    {
        // End:0x2A1
        if(!IsUnlocked(2, 1))
        {
            // End:0x2A1
            if(PlayedMap("UtopiaStadium_P"))
            {
                UnlockAchievement(2, 1);
            }
        }
    }
    Save();
    //return;    
}

private final function UpdateCarsPlayed()
{
    local int ProductID;
    local ProductSlot_TA ProductSlot;
    local StoredProductData ProductData;

    // End:0x22F
    if(!IsUnlocked(21) || !IsUnlocked(4, 2))
    {
        // End:0x1BE
        foreach PC.GetProfile().Loadout.Products(ProductID,)
        {
            // End:0x1BD
            if(ProductID != 0)
            {
                ProductSlot = class'GameData_TA'.default.ProductSlots[class'GameData_TA'.default.Products.Products[ProductID].SlotIndex];
                // End:0x1BD
                if(ProductSlot == class'GameData_TA'.default.BodySlot)
                {
                    ProductData = class'GameData_TA'.default.Products.Products[ProductID];
                    AddToNameList(SaveData.CarsPlayed, ProductData.Name);
                }
            }            
        }        
        // End:0x1F6
        if(!IsUnlocked(21) && PlayedAllCars(ClassicCars))
        {
            UnlockAchievement(21);
        }
        // End:0x22F
        if(!IsUnlocked(4, 2) && PlayedAllCars(DLC0Cars))
        {
            UnlockAchievement(4, 2);
        }
    }
    //return;    
}

private final function bool PlayedAllCars(array<name> CarsToCheck)
{
    local name PlayedCar;

    // End:0x43
    foreach SaveData.CarsPlayed(PlayedCar,)
    {
        CarsToCheck.RemoveItem(PlayedCar);        
    }    
    return CarsToCheck.Length == 0;
    //return ReturnValue;    
}

private final function bool IsPlayingWithAFriend(GameEvent_TA GameEvent, PRI_TA NewPlayerPRI)
{
    return LocalPlayer_X(PC.Player).OnlinePlayer.Friends.CachedFriends.Find('NickName', NewPlayerPRI.PlayerName) != -1;
    //return ReturnValue;    
}

private final function HandleNewProductUnlocked(SaveData_TA Data, int ProductID)
{
    // End:0x1D5
    if((!IsUnlocked(18) || !IsUnlocked(8)) || SaveData.CheckRandomItemsDropped.Length > 0)
    {
        ++ SaveData.RandomItemsDropped;
        // End:0xA2
        if(SaveData.RandomItemsDropped >= 5)
        {
            UnlockAchievement(18);
        }
        // End:0xCC
        else
        {
            IncrementStat(18, SaveData.RandomItemsDropped);
        }
        // End:0x108
        if(SaveData.RandomItemsDropped >= MaxItemsDropped)
        {
            UnlockAchievement(8);
        }
        // End:0x132
        else
        {
            IncrementStat(8, SaveData.RandomItemsDropped);
        }
        // End:0x1D5
        if(SaveData.RandomItemsDropped >= SaveData.CheckRandomItemsDropped[0])
        {
            EventRandomItemAmountDropped(self, SaveData.CheckRandomItemsDropped[0]);
            SaveData.CheckRandomItemsDropped.Remove(0, 1);
            Save();
        }
    }
    // End:0x26A
    if(!IsUnlocked(7))
    {
        // End:0x26A
        if(!class'GameData_TA'.default.XPManager.SlotContainsLockedProducts(class'GameData_TA'.default.BodySlot, PC.GetProfile()))
        {
            UnlockAchievement(7);
        }
    }
    // End:0x2DD
    if(!IsUnlocked(1))
    {
        // End:0x2DD
        if(class'GameData_TA'.default.XPManager.AllProductsUnlocked(PC.GetProfile()))
        {
            UnlockAchievement(1);
        }
    }
    //return;    
}

private final function HandleStatEvent(PRI_TA PRI, StatEvent_TA StatEvent)
{
    local int MVPScore;

    // End:0x44E
    if(GameEvent_Tutorial_TA(PRI.GameEvent) == none)
    {
        switch(StatEvent.Name)
        {
            // End:0x71
            case 'AerialGoal':
                UnlockAchievement(0, 1);
                // End:0x44E
                break;
            // End:0x8D
            case 'BackwardsGoal':
                UnlockAchievement(29);
                // End:0x44E
                break;
            // End:0xA9
            case 'PoolShot':
                UnlockAchievement(13);
                // End:0x44E
                break;
            // End:0x1E7
            case 'Goal':
                UnlockAchievement(33);
                // End:0xFC
                if(!IsUnlocked(6))
                {
                    ++ GoalsScoredInCurrentGame;
                    // End:0xFC
                    if(GoalsScoredInCurrentGame >= 6)
                    {
                        UnlockAchievement(6);
                    }
                }
                // End:0x1E4
                if(SaveData.CheckScoredGoals.Length > 0)
                {
                    ++ SaveData.TotalScoredGoals;
                    // End:0x1E4
                    if(SaveData.TotalScoredGoals >= SaveData.CheckScoredGoals[0])
                    {
                        EventGoalAmountScored(self, SaveData.CheckScoredGoals[0]);
                        SaveData.CheckScoredGoals.Remove(0, 1);
                        Save();
                    }
                }
                // End:0x44E
                break;
            // End:0x1F3
            case 'Save':
            // End:0x37B
            case 'EpicSave':
                // End:0x290
                if(!IsUnlocked(12))
                {
                    ++ SaveData.GoalSaves;
                    // End:0x266
                    if(SaveData.GoalSaves >= 20)
                    {
                        UnlockAchievement(12);
                    }
                    // End:0x290
                    else
                    {
                        IncrementStat(12, SaveData.GoalSaves);
                    }
                }
                // End:0x378
                if(SaveData.CheckShotsBlocked.Length > 0)
                {
                    ++ SaveData.TotalShotsBlocked;
                    // End:0x378
                    if(SaveData.TotalShotsBlocked >= SaveData.CheckShotsBlocked[0])
                    {
                        EventShotAmountBlocked(self, SaveData.CheckShotsBlocked[0]);
                        SaveData.CheckShotsBlocked.Remove(0, 1);
                        Save();
                    }
                }
                // End:0x44E
                break;
            // End:0x44B
            case 'MVP':
                MVPScore = PRI_TA(PC.PlayerReplicationInfo).MatchScore;
                // End:0x448
                if(MVPScore > SaveData.HighestMVPScore)
                {
                    SaveData.HighestMVPScore = MVPScore;
                    EventNewMVPScore(self, MVPScore);
                    Save();
                }
                // End:0x44E
                break;
            // End:0xFFFF
            default:
            }
            //return;            
}

private final function UpdateLevelsPlayed()
{
    // End:0x79
    if(!IsUnlocked(31))
    {
        AddToStringList(SaveData.LevelsPlayed, PC.WorldInfo.GetMapName());
        CheckLevelsPlayed();
    }
    //return;    
}

private final function CheckLevelsPlayed()
{
    // End:0x1A
    if(PlayedAllLevels())
    {
        UnlockAchievement(31);
    }
    //return;    
}

private final function bool PlayedAllLevels()
{
    local string PlayedLevel;
    local array<string> UnplayedLevels;

    UnplayedLevels = RequiredLevelsToPlay;
    // End:0x56
    foreach SaveData.LevelsPlayed(PlayedLevel,)
    {
        UnplayedLevels.RemoveItem(PlayedLevel);        
    }    
    return UnplayedLevels.Length == 0;
    //return ReturnValue;    
}

private final function UpdateTrainingModesPlayed(GameEvent_TA GameEvent)
{
    local GameEvent_Tutorial_TA TrainingEvent;

    TrainingEvent = GameEvent_Tutorial_TA(GameEvent);
    // End:0x138
    if((TrainingEvent != none) && TrainingEvent.GameEventRounds >= TrainingEvent.GetTotalRounds())
    {
        switch(GameEvent)
        {
            // End:0x97
            case GameEvent_Tutorial_Aerial_TA(GameEvent):
            // End:0xAC
            case GameEvent_Tutorial_Goalie_TA(GameEvent):
            // End:0x135
            case GameEvent_Tutorial_Striker_TA(GameEvent):
                UnlockAchievement(30);
                // End:0x132
                if(!IsUnlocked(15))
                {
                    AddToStringList(SaveData.TrainingModesPlayed, string(GameEvent.Class));
                    CheckTrainingModesPlayed();
                }
                // End:0x138
                break;
            // End:0xFFFF
            default:
            }
            //return;            
}

private final function CheckTrainingModesPlayed()
{
    // End:0x33
    if(SaveData.TrainingModesPlayed.Length >= 3)
    {
        UnlockAchievement(15);
    }
    //return;    
}

private final function HandleBoostAmountChanged(CarComponent_Boost_TA Boost)
{
    // End:0x106
    if(!IsUnlocked(17))
    {
        // End:0xA8
        if(bBoostWasFull)
        {
            // End:0xA8
            if(Boost.CurrentBoostAmount == float(0))
            {
                bBoostWasFull = false;
                ++ RocketBoostFills;
                // End:0xA8
                if(RocketBoostFills >= MaxRocketBoostFills)
                {
                    UnlockAchievement(17);
                    UnknownLocal_17235993
                    @NULL                                        
                    // End:0x106
                    if(!bBoostWasFull && Boost.CurrentBoostAmount >= Boost.MaxBoostAmount)
                    {
                    }
                }
            }
            bBoostWasFull = true;
            //return;            
        }
    }
}

event Tick(float DeltaTime)
{
    super.Tick(DeltaTime);
    // End:0x160
    if((PlayerController_TA(PC) != none) && Car_TA(PC.Pawn) != none)
    {
        // End:0x160
        if(((PRI_TA(PC.PlayerReplicationInfo) != none) && PRI_TA(PC.PlayerReplicationInfo).GameEvent != none) && PRI_TA(PC.PlayerReplicationInfo).GameEvent.GetStateName() == 'Active')
        {
            CheckBoosting(DeltaTime);
            CheckDriveTime();
            CheckWallDriveTime(DeltaTime);
            CheckDLC0PowerSlide();
        }
    }
    //return;    
}

private final function CheckWallDriveTime(float DeltaTime)
{
    // End:0xD0
    if(!IsUnlocked(19))
    {
        // End:0xD0
        if(Abs(Car_TA(PC.Pawn).GetGroundNormal().Z) < 0.90)
        {
            SaveData.TotalTimeOnWall += DeltaTime;
            // End:0xD0
            if(SaveData.TotalTimeOnWall > MaxTimeOnWall)
            {
                UnlockAchievement(19);
            }
        }
    }
    //return;    
}

private final function CheckBoosting(float DeltaTime)
{
    local Car_TA Car;

    // End:0x102
    if(!IsUnlocked(14))
    {
        Car = Car_TA(PC.Pawn);
        // End:0x102
        if((Car.BoostComponent != none) && Car.BoostComponent.bActive)
        {
            SaveData.TotalBoostTime += DeltaTime;
            // End:0x102
            if(SaveData.TotalBoostTime > MaxBoostTime)
            {
                UnlockAchievement(14);
            }
        }
    }
    //return;    
}

private final function CheckDriveTime()
{
    local Car_TA Car;
    local float MovedDistance;

    // End:0x2A4
    if(!IsUnlocked(2) || SaveData.CheckDistancesDrivenKM.Length > 0)
    {
        Car = Car_TA(PC.Pawn);
        // End:0x1D9
        if(Car.GetNumWheelWorldContacts() > 0)
        {
            MovedDistance = VSize(Car.Location - LastCarLocation);
            // End:0xE6
            if(MovedDistance < 0.010)
            {
                MovedDistance = 0.0;
            }
            SaveData.TotalDriveDistanceKM += ConvertUnrealToKM(MovedDistance);
            // End:0x155
            if(SaveData.TotalDriveDistanceKM > MaxDriveDistanceKM)
            {
                UnlockAchievement(2);
            }
            // End:0x1D9
            else
            {
                // End:0x1D9
                if(LastKMDrivenInt != int(SaveData.TotalDriveDistanceKM))
                {
                    LastKMDrivenInt = int(SaveData.TotalDriveDistanceKM);
                    IncrementStat(2, int(SaveData.TotalDriveDistanceKM));
                }
            }
        }
        LastCarLocation = Car.Location;
        // End:0x2A4
        if(SaveData.TotalDriveDistanceKM > SaveData.CheckDistancesDrivenKM[0])
        {
            EventDrivenDistance(self, SaveData.CheckDistancesDrivenKM[0]);
            SaveData.CheckDistancesDrivenKM.Remove(0, 1);
            Save();
        }
    }
    //return;    
}

private final function float ConvertUnrealToKM(float Distance)
{
    return (Distance / float(100)) / float(1000);
    //return ReturnValue;    
}

private final function HandleWonChampionship(GameEvent_Season_TA GameEvent)
{
    UnlockAchievement(4);
    // End:0x44
    if(!IsUnlocked(0, 2) && AllSeasonGamesPlayedWithDLC0Cars(GameEvent))
    {
        UnlockAchievement(0, 2);
    }
    ++ SaveData.ChampionshipsWon;
    EventChampionshipAmountChanged(self, SaveData.ChampionshipsWon);
    Save();
    //return;    
}

private final function bool AllSeasonGamesPlayedWithDLC0Cars(GameEvent_Season_TA GameEvent)
{
    local bool bPlayedWithDLC0Car;

    // End:0x5A
    if(GameEvent.Season.GetTotalSeasonWeeks() != SaveData.WinningIsWinningPlayedWithDLC0Cars.Length)
    {
        return false;
    }
    // End:0x9A
    foreach SaveData.WinningIsWinningPlayedWithDLC0Cars(bPlayedWithDLC0Car,)
    {
        // End:0x99
        if(!bPlayedWithDLC0Car)
        {            
            return false;
        }        
    }    
    return true;
    //return ReturnValue;    
}

private final function HandleProfileSet(LocalPlayer_TA LocalPlayer)
{

__EventExploded__Delegate_2558976:

__EventGameEnded__Delegate_2944768:
    // End:0x87
    if((LocalPlayer != none) && LocalPlayer.Profile != none)
    {
        UnknownLocal_1644825
        @NULL = ;
10Minutes_184811519:

        // Failed to decompile this line:
            /* LetBoolToken InstanceVariableToken
            LabelTableToken  */
        // Index was out of range. Must be non-negative and less than the size of the collection.
        Parameter name: index
    }
}

private final function HandleProductEquipped(int ProductID)
{
    local ProductSlot_TA ProductSlot;

    // End:0xC4
    if(!IsUnlocked(32))
    {
        ProductSlot = class'GameData_TA'.default.ProductSlots[class'GameData_TA'.default.Products.Products[ProductID].SlotIndex];
        // End:0xC4
        if(ProductSlot != class'GameData_TA'.default.BodySlot)
        {
            UnlockAchievement(32);
        }
    }
    CheckAllCarSlotsCustomized();
    //return;    
}

private final function HandleReplayStarted(GameInfo_Replay_TA Game)
{
    UnlockAchievement(22);
    //return;    
}

private final function CheckAllCarSlotsCustomized()
{
    local Profile_TA Profile;
    local LoadoutData Loadout;
    local ProductSlot_TA Slot;

    // End:0x172
    if(!IsUnlocked(10))
    {
        Profile = PC.GetProfile();
        Loadout = Profile.Loadout.GetData();
        // End:0x164
        foreach class'GFxData_Garage_TA'.default.LoadoutSlots(Slot,)
        {
            // End:0x163
            if(((Loadout.Products[Slot.SlotIndex] == Slot.GetDefaultProductID()) && Slot != class'GameData_TA'.default.PaintFinishSlot) && Slot != class'GameData_TA'.default.BodySlot)
            {                
                return;
            }            
        }        
        UnlockAchievement(10);
    }
    //return;    
}

private final function CheckUnlockedAllGameAchievements()
{
    local int I;

    // End:0x4B
    if(PC.WorldInfo.IsConsoleBuild() || IsUnlocked(0))
    {
        return;
    }
    I = 0 + 1;
    J0x59:
    // End:0x92 [Loop If]
    if(I < 36)
    {
        // End:0x84
        if(!IsUnlocked(I))
        {
            return;
        }
        ++ I;
        // [Loop Continue]
        goto J0x59;
    }
    UnlockAchievement(0);
    //return;    
}

private final function bool PlayedMap(string MapName)
{
    return PC.WorldInfo.GetMapName() ~= MapName;
    //return ReturnValue;    
}

private final function bool HasRideOrDieRequiredProducts()
{
    local name ProductName;
    local bool bHasPaint, bHasPaintFinish;

    // End:0x3D
    foreach RequiredRideOrDieDecalProducts(ProductName,)
    {
        // End:0x3C
        if(ProductIsInLoadout(ProductName))
        {
            bHasPaint = true;
            // End:0x3D
            break;
        }        
    }    
    // End:0x7B
    foreach RequiredRideOrDiePaintProducts(ProductName,)
    {
        // End:0x7A
        if(PaintFinishIsInLoadout(ProductName))
        {
            bHasPaintFinish = true;
            // End:0x7B
            break;
        }        
    }    
    return bHasPaint && bHasPaintFinish;
    //return ReturnValue;    
}

private final function bool ProductIsInLoadout(name ProductName)
{
    local int ProductID;

    // End:0xC8
    foreach PC.GetProfile().Loadout.Products(ProductID,)
    {
        // End:0xC7
        if(ProductID != 0)
        {
            // End:0xC7
            if(class'GameData_TA'.default.Products.Products[ProductID].Name == ProductName)
            {                
                return true;
            }
        }        
    }    
    return false;
    //return ReturnValue;    
}

private final function bool PaintFinishIsInLoadout(name ProductName)
{
    local int TeamIndex;

    TeamIndex = PC.PlayerReplicationInfo.GetTeamNum();
    // End:0x55
    if(TeamIndex == -1)
    {
        return false;
    }
    // End:0x112
    if(class'GameData_TA'.default.Products.Products[PC.GetProfile().Loadout.TeamPaints[TeamIndex].TeamFinishID].Name == ProductName)
    {
        return true;
    }
    // End:0x1CF
    if(class'GameData_TA'.default.Products.Products[PC.GetProfile().Loadout.TeamPaints[TeamIndex].CustomFinishID].Name == ProductName)
    {
        return true;
    }
    return false;
    //return ReturnValue;    
}

private final function HandleStatsCommited(PRI_TA PRI)
{
    CheckDLC0BoostTime();
    CheckDLC0WheelDriveDistance();
    //return;    
}

private final function CheckDLC0BoostTime()
{
    // End:0x78
    if(!IsUnlocked(3, 2))
    {
        // End:0x49
        if((GetTotalProductStats(RequiredDontLookBackProducts) / 60) >= TotalDLC0BoostTime)
        {
            UnlockAchievement(3, 2);
        }
        // End:0x78
        else
        {
            IncrementStat(GetActualAchievementID(3, 2), GetTotalProductStats(RequiredDontLookBackProducts) / 60);
        }
    }
    //return;    
}

private final function CheckDLC0WheelDriveDistance()
{
    // End:0x75
    if(!IsUnlocked(1, 2))
    {
        // End:0x47
        if((GetTotalProductStats(RequiredAnInchAnd62MilesProducts) / 100) >= TotalDLC0WheelDriveDistanceKM)
        {
            UnlockAchievement(1, 2);
        }
        // End:0x75
        else
        {
            IncrementStat(GetActualAchievementID(1, 2), GetTotalProductStats(RequiredAnInchAnd62MilesProducts) / 100);
        }
    }
    //return;    
}

private final function int GetTotalProductStats(array<name> ProductNames)
{
    local name ProductName;
    local int ProductID, Total;

    // End:0x91
    foreach ProductNames(ProductName,)
    {
        ProductID = GetProductIDByName(ProductName);
        // End:0x90
        if(ProductID > -1)
        {
            Total += PC.GetProfile().GetProductStatValue(ProductID);
        }        
    }    
    return Total;
    //return ReturnValue;    
}

function int GetProductIDByName(name ProductName)
{
    local int ProductID;
    local ProductSlot_TA ProductSlot;

    // End:0xF1
    foreach class'GameData_TA'.default.ProductSlots(ProductSlot,)
    {
        // End:0xEF
        foreach class'GameData_TA'.default.Products.AllProductIDs(ProductSlot, ProductID)
        {
            // End:0xEE
            if(ProductID != 0)
            {
                // End:0xEE
                if(class'GameData_TA'.default.Products.Products[ProductID].Name == ProductName)
                {
                    break;                    
                    return ProductID;
                }
            }            
        }                
    }    
    return -1;
    //return ReturnValue;    
}

private final function bool Handbrake180Completed()
{
    return (-HandbrakeStartDir Dot vector(PC.Pawn.Rotation)) > MinHandbrakeDotAngleForComplete;
    //return ReturnValue;    
}

private final function CheckDLC0PowerSlide()
{
    // End:0x26F
    if(!IsUnlocked(5, 2) && bHandbrakePressed)
    {
        // End:0xD0
        if(!PlayerController_TA(PC).Car.IsOnGround() || Abs(Car_TA(PC.Pawn).GetGroundNormal().Z) < 0.90)
        {
            bHandbrakePressed = false;
            return;
        }
        // End:0x132
        if(VSizeSq2D(PC.Pawn.Location - HandbrakeStartLocation) > Square(MaxHandbrakeRadius))
        {
            SetHandbrakeStartData();
        }
        // End:0x1A8
        if(!SaveData.bPowerSlideCristianoCompleted && CristianoProductID > -1)
        {
            // End:0x1A5
            if(Handbrake180Completed())
            {
                bHandbrakePressed = false;
                SaveData.bPowerSlideCristianoCompleted = true;
            }
        }
        // End:0x21B
        else
        {
            // End:0x21B
            if(!SaveData.bPowerSlideSpinnerCompleted && SpinnerProductID > -1)
            {
                // End:0x21B
                if(Handbrake180Completed())
                {
                    bHandbrakePressed = false;
                    SaveData.bPowerSlideSpinnerCompleted = true;
                }
            }
        }
        // End:0x26F
        if(SaveData.bPowerSlideCristianoCompleted && SaveData.bPowerSlideSpinnerCompleted)
        {
            UnlockAchievement(5, 2);
        }
    }
    //return;    
}

private final function SetHandbrakeStartData()
{
    HandbrakeStartLocation = PC.Pawn.Location;
    HandbrakeStartDir = vector(PC.Pawn.Rotation);
    HandbrakeStartDir.Z = 0.0;
    //return;    
}

private final function bool NotifyKeyInput(int ControllerId, name Key, Core.Object.EInputEvent EventType, optional float AmountDepressed, optional bool bGamepad)
{
    local name KeyName;

    AmountDepressed = 1.0;    
    // End:0x175
    if(((PlayerController_TA(PC) != none) && PlayerController_TA(PC).Car != none) && PlayerController_TA(PC).Car.IsOnGround())
    {
        KeyName = PlayerInput_TA(PC.PlayerInput).GetKeyForAction('Handbrake', bGamepad);
        // End:0x175
        if(Key == KeyName)
        {
            // End:0x155
            if(EventType == 0)
            {
                // End:0x152
                if(PC.Pawn != none)
                {
                    bHandbrakePressed = true;
                    SetHandbrakeStartData();
                }
            }
            // End:0x175
            else
            {
                // End:0x175
                if(EventType == 1)
                {
                    bHandbrakePressed = false;
                }
            }
        }
    }
    return false;
    //return ReturnValue;    
}

private final function bool AddToStringList(out array<string> Out_StringList, string NewName)
{
    // End:0x22
    if(Out_StringList.Find(NewName) != -1)
    {
        return false;
    }
    Out_StringList.AddItem(NewName);
    return true;
    //return ReturnValue;    
}

private final function bool AddToNameList(out array<name> Out_NameList, name NewName)
{
    // End:0x22
    if(Out_NameList.Find(NewName) != -1)
    {
        return false;
    }
    Out_NameList.AddItem(NewName);
    return true;
    //return ReturnValue;    
}

private final function Save()
{
    PC.GetSaveData().AchievementData = SaveData;
    PC.GetSaveData().super(AchievementManager_TA).Save();
    //return;    
}
**/