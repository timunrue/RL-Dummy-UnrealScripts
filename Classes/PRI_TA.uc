/*******************************************************************************
 * PRI_TA generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib Â© 2009-2015 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 * This class is going to be a pain to get working. SO MANY LINESNJKDGHFSKJLH
 * All rights belong to their respective owners.
 *******************************************************************************/
class PRI_TA extends PRI_X;

var transient int MatchScore;
var transient int MatchGoals;
var transient int MatchOwnGoals;
var transient int MatchAssists;
var transient int MatchSaves;
var transient int MatchShots;
var transient int MatchDemolishes;
var transient float MatchKMDriven;
var transient int MatchBonusXP;
var privatewrite repnotify transient bool bMatchMVP;
var privatewrite transient bool bLoadoutSet;
var transient bool bTeamPaintSet;
var privatewrite repnotify transient bool bReady;
var transient bool bBusy;
var privatewrite transient bool bUsingSecondaryCamera;
var privatewrite transient bool bUsingBehindView;
var privatewrite transient bool bUsingFreecam;
var privatewrite repnotify bool bIsInSplitScreen;
var privatewrite transient bool bSentLoadoutToAnalytics;
var privatewrite repnotify transient bool bDeveloper;
var private transient bool bTitlesSyncedFromPlayer;
var private transient bool bTitlesSyncedFromOnline;
var privatewrite transient GameEvent_TA GameEvent;
var privatewrite repnotify transient GameEvent_TA ReplicatedGameEvent;
var privatewrite transient Car_TA Car;
var privatewrite transient LoadoutData FullLoadout;
var privatewrite repnotify transient ClientLoadoutData ClientLoadout;
var transient LoadoutTeamPaint TeamPaint;
var privatewrite transient array<TAPlayerStat> MatchStats;
var privatewrite repnotify transient int RespawnTimeRemaining;
var privatewrite transient int WaitingStartTime;
var transient float TotalGameTimePlayed;
var privatewrite transient ProfileCameraSettings CameraSettings;
var privatewrite transient byte CameraPitch;
var privatewrite transient byte CameraYaw;
var privatewrite transient array<ProductStat_TA> ProductStats;
var privatewrite transient array<ProductStat> PendingProductStatValues;
var privatewrite repnotify UniqueNetId PartyLeader;
var private transient Vector LastCarLocation;
var privatewrite repnotify transient int TotalXP;
var privatewrite transient array<PlayerTitle_TA> PlayerTitles;
var privatewrite transient string SanitizedPlayerName;

/**
var delegate<EventGameEventChanged> __EventGameEventChanged__Delegate;
var delegate<EventStatEvent> __EventStatEvent__Delegate;
var delegate<EventSelectedLoadout> __EventSelectedLoadout__Delegate;
var delegate<EventRespawnTimeUpdated> __EventRespawnTimeUpdated__Delegate;
var delegate<EventStatTickerMessage> __EventStatTickerMessage__Delegate;
var delegate<EventInvalidPsyonixID> __EventInvalidPsyonixID__Delegate;
var delegate<EventReadyChanged> __EventReadyChanged__Delegate;
var delegate<EventRandomItemDropped> __EventRandomItemDropped__Delegate;
var delegate<EventCarSet> __EventCarSet__Delegate;
var delegate<EventSplitScreenStatusChanged> __EventSplitScreenStatusChanged__Delegate;
var delegate<EventCameraChanged> __EventCameraChanged__Delegate;
var delegate<EventPartyLeaderChanged> __EventPartyLeaderChanged__Delegate;
var delegate<EventScorePoint> __EventScorePoint__Delegate;
var delegate<EventWonMVP> __EventWonMVP__Delegate;
var delegate<EventTotalXPChanged> __EventTotalXPChanged__Delegate;
var delegate<EventSpectatorChanged> __EventSpectatorChanged__Delegate;
var delegate<EventCommittedStats> __EventCommittedStats__Delegate;

r

delegate EventGameEventChanged(PRI_TA PRI)
{
    //return;    
}

delegate EventStatEvent(PRI_TA PRI, StatEvent_TA StatEvent)
{
    //return;    
}

delegate EventSelectedLoadout(PRI_TA PRI)
{
    //return;    
}

delegate EventRespawnTimeUpdated(int NewTime)
{
    //return;    
}

delegate EventStatTickerMessage(PRI_TA Receiver, PRI_TA Victim, StatEvent_TA StatEvent)
{
    //return;    
}

delegate EventInvalidPsyonixID()
{
    //return;    
}

delegate EventReadyChanged(PRI_TA PRI)
{
    //return;    
}

delegate EventRandomItemDropped(PRI_TA PRI, int ProductID)
{
    //return;    
}

delegate EventCarSet(PRI_TA PRI)
{
    //return;    
}

delegate EventSplitScreenStatusChanged(PRI_TA PRI)
{
    //return;    
}

delegate EventCameraChanged(PRI_TA PRI)
{
    //return;    
}

delegate EventPartyLeaderChanged(PRI_TA PRI, UniqueNetId LeaderId)
{
    //return;    
}

delegate EventScorePoint(PRI_TA PRI, int Points)
{
    //return;    
}

delegate EventWonMVP(PRI_TA PRI)
{
    //return;    
}

delegate EventTotalXPChanged(PRI_TA PRI)
{
    //return;    
}

delegate EventSpectatorChanged(PRI_TA PRI)
{
    //return;    
}

delegate EventCommittedStats(PRI_TA PRI)
{
    //return;    
}

**/

simulated event ReplicatedEvent(name VarName)
{
  
}

simulated event PostBeginPlay()
{
 
}

simulated event OnOwnerChanged(Actor NewOwner)
{
 
    //return;    
}

protected simulated function UpdatePartyStatus()
{
   
}

protected simulated function HandlePartyStatusChanged(OnlineGameParty_X Party)
{
  
}

protected simulated function SetPartyLeader(UniqueNetId InPartyLeader)
{
   
}

reliable server function ServerSetPartyLeader(UniqueNetId InPartyLeader)
{
  
}

protected simulated function UpdateSplitScreenStatus()
{
  
}

reliable server function ServerSplitScreenStatusChanged(bool bInSplitScreen)
{
   
}

private final simulated function HandleLocalPlayerJoin(LocalPlayer NewPlayer)
{

}

private final simulated function HandleLocalPlayerLeave(LocalPlayer OldPlayer)
{
   
}

protected simulated function OnSplitScreenStatusChanged()
{

}

reliable server function ServerSetLoadout(LoadoutData NewLoadout)
{
   
}

protected function OverrideBody(out LoadoutData NewLoadout, const out array<name> BodyNames)
{
   
}

function SetTestLoadout(LoadoutData NewLoadout)
{
   
}

protected simulated function OnLoadoutChanged()
{

}

simulated function SetGameEvent(GameEvent_TA InGameEvent)
{
 
}

function SetReplayGameEvent(GameEvent_TA InGameEvent)
{
   
}

final simulated function AddLocalPlayerToGameEvent()
{
  
}

simulated function Unregister()
{
  
}

final simulated function bool IsLocalPlayerPRI()
{
 
}

final function bool IsClientPlayerPRI()
{
 
}

simulated function SetCar(Car_TA NewCar)
{
  
}

protected function UpdateKMDriven()
{
  
}

protected simulated function InitProductStats()
{

}

private final simulated function HandleLoadoutLoaded(ProductLoader_TA Loadout)
{
     
}

final simulated function int GetProductStatValue(int ProductID)
{
   
}

final simulated function SetProductStatValue(int ProductID, int Value)
{
   
}

simulated function CommitStats()
{

}

protected simulated function CommitProductStats(Profile_TA Profile)
{
 
}

protected simulated function CommitMatchStats(Profile_TA Profile)
{

}
/**
function GiveScore(StatEvent_TA StatEvent)
{

}

protected simulated function OnGainedStat(StatEvent_TA StatEvent)
{

}

reliable client simulated function ClientNotifyGainedStat(StatEvent_TA StatEvent)
{

}

simulated function IncrementStat(StatEvent_TA StatEvent)
{
   
}

function ScorePoint()
{     
}

function RemovePoints(int Points)
{

}

simulated function SetRespawnTime(int NewTime)
{
  
}

reliable client simulated function ClientNotifyStatTickerMessage(PRI_TA Receiver, PRI_TA Victim, StatEvent_TA StatEvent)
{    
}

function SetWaitingStartTime()
{

}

simulated function HandleItemDropped(int ProductID)
{
   
}

simulated function bool ShouldBroadCastWelcomeMessage(optional bool bExiting)
{
  
}

reliable server function ServerReadyUp()
{
    
}

simulated function SetReady(bool bNewReady)
{

}

simulated function SetCameraSettings(ProfileCameraSettings InSettings)
{

}

reliable server function ServerSetCameraSettings(ProfileCameraSettings InSettings)
{
   
}

simulated function SetUsingSecondaryCamera(bool bUsing)
{
 
}

reliable server function ServerSetUsingSecondaryCamera(bool bUsing)
{

}

simulated function SetUsingBehindView(bool bUsing)
{

}

reliable server function ServerSetUsingBehindView(bool bUsing)
{

}

simulated function SetUsingFreecam(bool bUsing)
{

}

reliable server function ServerSetUsingFreecam(bool bUsing)
{
 
}

simulated function SetCameraRotation(byte Pitch, byte Yaw)
{

}

reliable server function ServerSetCameraRotation(byte Pitch, byte Yaw)
{

}

simulated function bool IsInWarmUpMode()
{

}

simulated function bool IsInGameState(name StateName)
{
 
}

simulated function bool IsInvalidName()
{

}

function NotifyWonMVP()
{

}

protected simulated function OnMVPChange()
{
    
}

reliable server function ServerSetVoteStatus(VoteActor_TA VoteActor, _Types_TA.EVoteStatus NewVote)
{
  
}

reliable server function ServerChangeTeam(int TeamNum)
{


reliable server function ServerSpectate()
{
 
}

function SetSpectator(bool bSpectate)
{
 
}

function SetWaitingPlayer(bool B)
{


protected simulated function OnSpectatorChanged()
{

}

protected simulated function OnTeamChanged()
{
   
}

protected simulated function OnTotalXPChanged()
{
    
}

reliable server function ServerSetTotalXP(int NewXP)
{

}

function SyncTitles()
{
  
}

function PlayerTitleDataSet GetPlayerTitleData()
{
  
}

protected function SetPlayerTitles(const out array<PlayerTitle_TA> Titles)
{

}

private final function int SortPlayerTitles(PlayerTitle_TA A, PlayerTitle_TA B)
{
  
}

reliable client simulated function ClientGetPlayerTitles()
{
   
}

reliable server function ServerSetTitles(PlayerTitleDataSet Data)
{
   
}

simulated function OnlineGame_X GetOnlineGame()
{
  
}

simulated function SanitizePlayerName(PRI_X PRI)
{
    //LogInternal(((((((string(self) @ "SanitizePlayerName PlayerName=") $ PlayerName) @ "UniqueId=") $ class'Online_X'.static.UniqueNetIdToString(UniqueId)) @ "bBot:'") $ string(bBot)) $ "'", 'PlayerNames');
    // End:0x1A0


private final simulated function SetPlayerNameSanitized(string Original, string Sanitized)
{
   
}

reliable server function ServerVoteToForfeit()
{

}

simulated function PrintDebugInfo(DebugDrawer Drawer)
{

}
**/