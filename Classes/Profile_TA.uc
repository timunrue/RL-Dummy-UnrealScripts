/*******************************************************************************
 * Profile_TA generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib Â© 2009-2015 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class Profile_TA extends Object;

var int LocalID;
var string ProfileName;
var transient SaveData_TA SaveData;
var transient int ControllerId;
var bool bInvertSwivelPitch;
var bool bInvertSpectatorPitch;
var bool bPrefersSecondaryCamera;
var bool bToggleSecondaryCamera;
var bool bToggleRearCamera;
var bool bFreecam;
var bool bEnableHorizontalSplitscreen;
var bool bEnableForceFeedback;
var bool bEnableCameraShake;
var bool bMetric;
var bool bDisableCrossPlay;
var bool bPushToTalk;
var bool bControllerSound;
var bool bUseBallIndicator;
var bool bUseTeamIndicator;
var bool bUseBallCamIndicator;
//var array<PlayerBinding> PCBindings;
//var array<PlayerBinding> GamepadBindings;
var float MouseSensitivity;
var Loadout_TA Loadout;
var array<name> QuickMatchPlaylists;
var array<string> QuickMatchRegions;
var string CustomMatchRegion;
//var CustomMatchSettings CustomMatchSettings;
//var CustomMatchSettings ServerBrowserSettings;
var private array<KeyValuePair> CustomMatchGameTags;
//var ProfileCameraSettings Camera;
var string BugReportEmail;
var string TimeFormat;
var array<Season_TA> Seasons;
var array<StatValue> StatValues;
var array<ProductStat> ProductStats;
var privatewrite int TotalXP;
var int TotalTimePlayedOffline;
var TutorialSave_TA Tutorial;
var array<UISavedKeyValue> UISavedValues;
var int InputVersion;
/**
var delegate<EventXPUpdated> __EventXPUpdated__Delegate;

delegate EventXPUpdated(Profile_TA Profile)
{
    //return;    
}

final function Init(SaveData_TA InSaveData, string InProfileName, int InLocalID)
{
    
}

final function Save()
{
 
}

function OnLoaded(SaveData_TA InSaveData)
{
   
}

final function AddTimePlayedOffline(int TimePlayed)
{
   
}

private final function CheckForNewBindings(const out array<PlayerBinding> DefaultBindings, out array<PlayerBinding> Bindings)
{
   
}

final function ClearLoadouts()
{
    Loadout = new class'Loadout_TA';
    Loadout.Init(self);
    //return;    
}

final function ValidateLoadouts()
{
    LogInternal((("Profile ValidateLoadouts: ProfileName=" $ ProfileName) @ "LocalID=") $ string(LocalID), 'LoadoutValidation', true);
    Loadout.Validate();
    //return;    
}

final function SetStatValue(_Types_TA.ETAStatType StatType, name Id, int Value)
{
    local int StatIdx;

    StatIdx = StatValues.Find('Id', Id);
    // End:0x95
    if(StatIdx == -1)
    {
        StatIdx = StatValues.Length;
        StatValues.Insert(StatIdx, 1);
        StatValues[StatIdx].Id = Id;
    }
    StatValues[StatIdx].Values[StatType] = Value;
    //return;    
}

final function IncrementStatValue(_Types_TA.ETAStatType StatType, name Id, optional int Amount)
{
    Amount = 1;
    SetStatValue(StatType, Id, GetStatValue(StatType, Id) + Amount);
    //return;    
}

final function int GetStatValue(_Types_TA.ETAStatType StatType, name Id)
{
    local int StatIdx;

    StatIdx = StatValues.Find('Id', Id);
    // End:0x72
    if(StatIdx != -1)
    {
        return StatValues[StatIdx].Values[StatType];
    }
    // End:0x74
    else
    {
        return 0;
    }
    //return ReturnValue;    
}

final function int GetProductStatValue(int ProductID)
{
    local int Idx;

    Idx = ProductStats.Find('ProductID', ProductID);
    // End:0x63
    if(Idx != -1)
    {
        return ProductStats[Idx].Value;
    }
    return 0;
    //return ReturnValue;    
}

final function SetProductStatValue(int ProductID, int Value)
{
    local int Idx;

    Idx = ProductStats.Find('ProductID', ProductID);
    // End:0x98
    if(Idx == -1)
    {
        Idx = ProductStats.Length;
        ProductStats.Length = ProductStats.Length + 1;
        ProductStats[Idx].ProductID = ProductID;
    }
    ProductStats[Idx].Value = Value;
    //return;    
}

final function Season_TA GetLatestSeason()
{
    // End:0x28
    if(Seasons.Length > 0)
    {
        return Seasons[Seasons.Length - 1];
    }
    return none;
    //return ReturnValue;    
}

function GiveXP(float Amount)
{
    TotalXP += int(Amount);
    EventXPUpdated(self);
    //return;    
}

final function GetXPInfo(out int Out_XPTotal, out int Out_XPLevel, out string Out_XPTitle, out int Out_XPProgressInCurrentLevel, out int Out_XPRequiredForNextLevel)
{
    local XPManager_TA XPManager;

    XPManager = class'GameData_TA'.default.XPManager;
    Out_XPTotal = TotalXP;
    Out_XPLevel = XPManager.CalculatePlayerLevel(Out_XPTotal);
    Out_XPTitle = XPManager.DetermineLevelTitle(Out_XPLevel);
    Out_XPProgressInCurrentLevel = Out_XPTotal - XPManager.GetTotalXPRequiredForLevel(Out_XPLevel);
    Out_XPRequiredForNextLevel = XPManager.CalculateRequiredXPForLevel(Out_XPLevel - 1);
    //return;    
}

final function SetCustomMatchGameTag(string Key, string Value)
{
    local int Index;

    Index = CustomMatchGameTags.Find('Key', Key);
    // End:0x82
    if(Index == -1)
    {
        Index = CustomMatchGameTags.Add(1);
        CustomMatchGameTags[Index].Key = Key;
    }
    CustomMatchGameTags[Index].Value = Value;
    //return;    
}

final function string GetCustomMatchGameTag(string Key)
{
    local int Index;

    Index = CustomMatchGameTags.Find('Key', Key);
    // End:0x3F
    if(Index == -1)
    {
        return "";
    }
    return CustomMatchGameTags[Index].Value;
    //return ReturnValue;    
}

final function CustomMatchSettings GetCustomMatchSettings()
{
    local CustomMatchSettings Settings;

    Settings = CustomMatchSettings;
    Settings.GameTags = GetCustomMatchGameTags();
    Settings.MaxPlayerCount = CustomMatchSettings.MaxPlayerCount * 2;
    return Settings;
    //return ReturnValue;    
}

final function string GetCustomMatchGameTags()
{
    local string GameTags;
    local int I;

    I = 0;
    J0x0B:
    // End:0x93 [Loop If]
    if(I < CustomMatchGameTags.Length)
    {
        // End:0x4A
        if(I > 0)
        {
            GameTags $= ",";
        }
        GameTags $= CustomMatchGameTags[I].Value;
        ++ I;
        // [Loop Continue]
        goto J0x0B;
    }
    return GameTags;
    //return ReturnValue;    
}

simulated function PrintDebugInfo(DebugDrawer Drawer)
{
    Drawer.DebugObject(string('Loadout'), Loadout);
    //return;    
}
**/
