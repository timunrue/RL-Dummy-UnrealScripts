/*******************************************************************************
 * GameEvent_TA generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2015 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class GameEvent_TA extends Actor
    abstract
    native
    collapsecategories
    notplaceable;

/** Editor ID for identifying this type of game event (Soccar, Knockout) */
var() const name EventType;
/** Type of match for this game event (online, private, season) */
var() const name MatchType;
/** What type of car to spawn */
var() Car_TA CarArchetype;
/** How long of a countdown to do */
var() int CountdownTime;
/** How long we should stay in the finished(match ended) state */
var() int FinishTime;
/** If true, multiple players participate in this event */
var() const bool bMultiplayer;
/** Fill teams with AI? */
var() bool bFillWithAI;
var privatewrite transient bool bAllowReadyUp;
var bool bRestartingMatch;
var privatewrite repnotify transient bool bHasLeaveMatchPenalty;
/** If multiplayer, limits on how many people can play this event */
var() privatewrite int MinPlayers;
/** If multiplayer, limits on how many people can play this event */
var() privatewrite int MaxPlayers;
/** Starting points for this event */
var(Setup) array<Actor> SpawnPoints;
/** AI manager to spawn */
//var() AIManager_TA AIManagerArchetype;
//var privatewrite transient AIManager_TA AIManager;
/** AI controller to use for bots */
//var() AIController_TA BotArchetype;
var privatewrite transient float BotSkill;
/** The amount of time it takes a car to respawn after being killed */
var() int RespawnTime;
//var array<Mutator_TA> Mutators;
var() privatewrite float MatchTimeDilation;
/** HUD Archetype for this game event */
var() HUD HUDArchetype;
//var protectedwrite transient array<PlayerRespawnTime> PlayersAwaitingRespawn;
var privatewrite transient PlayerController_TA Activator;
var privatewrite transient Car_TA ActivatorCar;
var privatewrite transient array<Controller> Players;
//var privatewrite transient array<PRI_TA> PRIs;
var privatewrite transient array<Car_TA> Cars;
var privatewrite transient array<PlayerController_TA> LocalPlayers;
var protectedwrite transient int StartPointIndex;
var private repnotify transient byte ReplicatedStateIndex;
//var Message_TA GameFullMessage;
//var Message_TA OtherActiveMessage;
//var Message_TA NotEnoughPlayersMessage;
//var Message_TA TooManyPlayersMessage;
//var Message_TA NotPartyLeaderMessage;
//var array<Message_TA> CountdownMessages;
//var Message_TA GoMessage;
var privatewrite transient int GameStateTimeRemaining;
var private repnotify transient int ReplicatedGameStateTimeRemaining;
/** Kick client when they have been idle for this long */
var() float KickIdleTime;
/** Player skill value that should match max bot skill value (before UI conversion) */
var() float MaxPlayerSkillForMaxBotSkill;
/**
var delegate<EventGameStateChanged> __EventGameStateChanged__Delegate;
var delegate<EventGameStateTimeUpdated> __EventGameStateTimeUpdated__Delegate;
var delegate<EventFinished> __EventFinished__Delegate;
var delegate<EventDestroyed> __EventDestroyed__Delegate;
var delegate<EventPlayerRestarted> __EventPlayerRestarted__Delegate;
var delegate<EventPlayerAdded> __EventPlayerAdded__Delegate;
var delegate<EventPlayerRemoved> __EventPlayerRemoved__Delegate;
var delegate<EventCarSpawned> __EventCarSpawned__Delegate;
var delegate<EventCarDestroyed> __EventCarDestroyed__Delegate;
var delegate<EventPenaltyChanged> __EventPenaltyChanged__Delegate;
**/